{"file_contents":{"App.tsx":{"content":"\nimport React from 'react';\nimport { AuthProvider } from './src/auth/AuthContext';\nimport { TransactionsProvider } from './src/transactions/TransactionsContext';\nimport { Slot } from 'expo-router';\n\nexport default function App() {\n  return (\n    <AuthProvider>\n      <TransactionsProvider>\n        <Slot />\n      </TransactionsProvider>\n    </AuthProvider>\n  );\n}\n","size_bytes":364},"README.md":{"content":"> Edited for use in IDX on 07/09/12\n\n# Welcome to your Expo app 👋\n\nThis is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).\n\n## Get started\n\n#### Android\n\nAndroid previews are defined as a `workspace.onStart` hook and started as a vscode task when the workspace is opened/started.\n\nNote, if you can't find the task, either:\n- Rebuild the environment (using command palette: `IDX: Rebuild Environment`), or\n- Run `npm run android -- --tunnel` command manually run android and see the output in your terminal. The device should pick up this new command and switch to start displaying the output from it.\n\nIn the output of this command/task, you'll find options to open the app in a\n\n- [development build](https://docs.expo.dev/develop/development-builds/introduction/)\n- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)\n- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo\n\nYou'll also find options to open the app's developer menu, reload the app, and more.\n\n#### Web\n\nWeb previews will be started and managred automatically. Use the toolbar to manually refresh.\n\nYou can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).\n\n## Get a fresh project\n\nWhen you're ready, run:\n\n```bash\nnpm run reset-project\n```\n\nThis command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.\n\n## Learn more\n\nTo learn more about developing your project with Expo, look at the following resources:\n\n- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).\n- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.\n\n## Join the community\n\nJoin our community of developers creating universal apps.\n\n- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.\n- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.\n","size_bytes":2273},"app/+not-found.tsx":{"content":"\nimport { Link, Stack } from 'expo-router';\nimport { StyleSheet, View, Text } from 'react-native';\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: 'Oops!' }} />\n      <View style={styles.container}>\n        <Text style={styles.title}>This screen does not exist.</Text>\n        <Link href=\"/\" style={styles.link}>\n          <Text style={styles.linkText}>Go to home screen!</Text>\n        </Link>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","size_bytes":827},"app/_layout.tsx":{"content":"\nimport { Slot, useRouter, useSegments } from \"expo-router\";\nimport { useEffect } from \"react\";\nimport { ActivityIndicator, StyleSheet, Text, View } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { AuthProvider, useAuth } from \"../src/auth/AuthContext\";\nimport { TransactionsProvider } from \"../src/transactions/TransactionsContext\";\n\nconst AuthRedirector = () => {\n  const { user } = useAuth();\n  const segments = useSegments();\n  const router = useRouter();\n\n  useEffect(() => {\n    const inTabsGroup = segments[0] === \"(tabs)\";\n    if (user && !inTabsGroup) {\n      router.replace(\"/(tabs)\");\n    } else if (!user && inTabsGroup) {\n      router.replace(\"/login\");\n    } else if (!user && segments[0] !== 'login' && segments[0] !== 'register') {\n      router.replace(\"/login\");\n    }\n  }, [user, segments]);\n\n  return <Slot />;\n};\n\nconst InitialLayout = () => {\n  const { loading } = useAuth(); // Get loading state\n\n  // Show a loading indicator until authentication state is resolved\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#059669\" />\n        <Text style={styles.loadingText}>Checking authentication...</Text>\n      </View>\n    );\n  }\n\n  return <AuthRedirector />;\n};\n\nconst RootLayout = () => {\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <AuthProvider>\n        <TransactionsProvider>\n          <InitialLayout />\n        </TransactionsProvider>\n      </AuthProvider>\n    </GestureHandlerRootView>\n  );\n};\n\nexport default RootLayout;\n\nconst styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#ffffff',\n  },\n  loadingText: {\n    marginTop: 12,\n    color: '#475569',\n    fontSize: 16,\n  },\n});\n","size_bytes":1861},"app/add-transaction.tsx":{"content":"\nimport { Picker } from '@react-native-picker/picker';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useRouter } from 'expo-router';\nimport React, { useState } from 'react';\nimport { Alert, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { useTransactions } from '../src/transactions/TransactionsContext';\n\nconst AddTransactionScreen = () => {\n  const [description, setDescription] = useState('');\n  const [amount, setAmount] = useState('');\n  const [category, setCategory] = useState('Food'); // Default category\n  const [type, setType] = useState<'expense' | 'income'>('expense');\n  const [date, setDate] = useState(new Date().toISOString().split('T')[0]); // YYYY-MM-DD\n\n  const { addTransaction } = useTransactions();\n  const router = useRouter();\n\n  const handleAddTransaction = async () => {\n    if (!description || !amount || !date) {\n      Alert.alert('Missing Information', 'Please fill out all fields.');\n      return;\n    }\n\n    const numericAmount = parseFloat(amount);\n    if (isNaN(numericAmount) || numericAmount <= 0) {\n      Alert.alert('Invalid Amount', 'Please enter a valid, positive number for the amount.');\n      return;\n    }\n\n    try {\n      await addTransaction({ description, amount: numericAmount, category, type, date });\n      Alert.alert('Success', 'Transaction added successfully!');\n      router.back();\n    } catch (error: any) {\n      Alert.alert('Error', `Failed to add transaction: ${error.message}`);\n    }\n  };\n\n  return (\n  <LinearGradient colors={[\"#ecfdf5\", \"#d1fae5\"]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.gradient}>\n  <View style={styles.container}>\n      <Text style={styles.title}>Add New Transaction</Text>\n\n      <TextInput\n        style={styles.input}\n        placeholder=\"Description\"\n        value={description}\n        onChangeText={setDescription}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Amount\"\n        value={amount}\n        onChangeText={setAmount}\n        keyboardType=\"numeric\"\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Date (YYYY-MM-DD)\"\n        value={date}\n        onChangeText={setDate}\n      />\n\n      <Text style={styles.label}>Category</Text>\n      <Picker\n        selectedValue={category}\n        onValueChange={(itemValue) => setCategory(itemValue)}\n        style={styles.picker}\n      >\n        <Picker.Item label=\"Food\" value=\"Food\" />\n        <Picker.Item label=\"Transport\" value=\"Transport\" />\n        <Picker.Item label=\"Shopping\" value=\"Shopping\" />\n        <Picker.Item label=\"Bills\" value=\"Bills\" />\n        <Picker.Item label=\"Entertainment\" value=\"Entertainment\" />\n        <Picker.Item label=\"Salary\" value=\"Salary\" />\n        <Picker.Item label=\"Other\" value=\"Other\" />\n      </Picker>\n\n      <Text style={styles.label}>Type</Text>\n      <Picker\n        selectedValue={type}\n        onValueChange={(itemValue) => setType(itemValue)}\n        style={styles.picker}\n      >\n        <Picker.Item label=\"Expense\" value=\"expense\" />\n        <Picker.Item label=\"Income\" value=\"income\" />\n      </Picker>\n\n      <TouchableOpacity style={styles.addButton} onPress={handleAddTransaction}>\n        <Text style={styles.addButtonText}>Add Transaction</Text>\n      </TouchableOpacity>\n    </View>\n    </LinearGradient>\n  );\n};\n\nconst styles = StyleSheet.create({\n  gradient: { flex: 1 },\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: 'transparent',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  input: {\n    height: 50,\n    borderColor: '#cbd5e1',\n    borderWidth: 1,\n    borderRadius: 8,\n    marginBottom: 16,\n    paddingHorizontal: 16,\n    backgroundColor: '#ffffff',\n    fontSize: 16,\n  },\n  label: {\n      fontSize: 16,\n      marginBottom: 8,\n      color: '#475569',\n  },\n  picker: {\n      height: 50,\n      borderColor: '#cbd5e1',\n      borderWidth: 1,\n      borderRadius: 8,\n      marginBottom: 16,\n      backgroundColor: '#ffffff',\n  },\n  addButton: {\n    backgroundColor: '#059669',\n    paddingVertical: 14,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  addButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default AddTransactionScreen;\n","size_bytes":4284},"app/edit-transaction.tsx":{"content":"\nimport { Picker } from '@react-native-picker/picker';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useLocalSearchParams, useRouter } from 'expo-router';\nimport React, { useEffect, useState } from 'react';\nimport { Alert, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { useTransactions } from '../src/transactions/TransactionsContext';\n\nconst EditTransactionScreen = () => {\n  const { id } = useLocalSearchParams();\n  const { transactions, updateTransaction } = useTransactions();\n  const router = useRouter();\n\n  const transactionToEdit = transactions.find(t => t.id === id);\n\n  const [description, setDescription] = useState('');\n  const [amount, setAmount] = useState('');\n  const [category, setCategory] = useState('Food');\n  const [type, setType] = useState<'expense' | 'income'>('expense');\n  const [date, setDate] = useState('');\n\n  useEffect(() => {\n    if (transactionToEdit) {\n      setDescription(transactionToEdit.description);\n      setAmount(transactionToEdit.amount.toString());\n      setCategory(transactionToEdit.category);\n      setType(transactionToEdit.type);\n      setDate(transactionToEdit.date);\n    }\n  }, [transactionToEdit]);\n\n  const handleUpdateTransaction = async () => {\n    if (!description || !amount || !date) {\n      Alert.alert('Missing Information', 'Please fill out all fields.');\n      return;\n    }\n\n    const numericAmount = parseFloat(amount);\n    if (isNaN(numericAmount) || numericAmount <= 0) {\n      Alert.alert('Invalid Amount', 'Please enter a valid, positive number for the amount.');\n      return;\n    }\n\n    try {\n      await updateTransaction(id as string, { description, amount: numericAmount, category, type, date });\n      Alert.alert('Success', 'Transaction updated successfully!');\n      router.back();\n    } catch (error: any) {\n      Alert.alert('Error', `Failed to update transaction: ${error.message}`);\n    }\n  };\n\n  if (!transactionToEdit) {\n    return <Text>Transaction not found.</Text>;\n  }\n\n  return (\n  <LinearGradient colors={[\"#ecfdf5\", \"#d1fae5\"]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.gradient}>\n  <View style={styles.container}>\n      <Text style={styles.title}>Edit Transaction</Text>\n\n      <TextInput\n        style={styles.input}\n        placeholder=\"Description\"\n        value={description}\n        onChangeText={setDescription}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Amount\"\n        value={amount}\n        onChangeText={setAmount}\n        keyboardType=\"numeric\"\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Date (YYYY-MM-DD)\"\n        value={date}\n        onChangeText={setDate}\n      />\n\n      <Text style={styles.label}>Category</Text>\n      <Picker\n        selectedValue={category}\n        onValueChange={(itemValue) => setCategory(itemValue)}\n        style={styles.picker}\n      >\n        <Picker.Item label=\"Food\" value=\"Food\" />\n        <Picker.Item label=\"Transport\" value=\"Transport\" />\n        <Picker.Item label=\"Shopping\" value=\"Shopping\" />\n        <Picker.Item label=\"Bills\" value=\"Bills\" />\n        <Picker.Item label=\"Entertainment\" value=\"Entertainment\" />\n        <Picker.Item label=\"Salary\" value=\"Salary\" />\n        <Picker.Item label=\"Other\" value=\"Other\" />\n      </Picker>\n\n      <Text style={styles.label}>Type</Text>\n      <Picker\n        selectedValue={type}\n        onValueChange={(itemValue) => setType(itemValue)}\n        style={styles.picker}\n      >\n        <Picker.Item label=\"Expense\" value=\"expense\" />\n        <Picker.Item label=\"Income\" value=\"income\" />\n      </Picker>\n\n      <TouchableOpacity style={styles.addButton} onPress={handleUpdateTransaction}>\n        <Text style={styles.addButtonText}>Update Transaction</Text>\n      </TouchableOpacity>\n    </View>\n    </LinearGradient>\n  );\n};\n\nconst styles = StyleSheet.create({\n  gradient: { flex: 1 },\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: 'transparent',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  input: {\n    height: 50,\n    borderColor: '#cbd5e1',\n    borderWidth: 1,\n    borderRadius: 8,\n    marginBottom: 16,\n    paddingHorizontal: 16,\n    backgroundColor: '#ffffff',\n    fontSize: 16,\n  },\n  label: {\n      fontSize: 16,\n      marginBottom: 8,\n      color: '#475569',\n  },\n  picker: {\n      height: 50,\n      borderColor: '#cbd5e1',\n      borderWidth: 1,\n      borderRadius: 8,\n      marginBottom: 16,\n      backgroundColor: '#ffffff',\n  },\n  addButton: {\n    backgroundColor: '#059669',\n    paddingVertical: 14,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  addButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default EditTransactionScreen;\n","size_bytes":4797},"app/login.tsx":{"content":"\nimport * as AuthSession from 'expo-auth-session';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useRouter } from 'expo-router';\nimport * as WebBrowser from 'expo-web-browser';\nimport React, { useState } from 'react';\nimport { Alert, Image, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { useAuth } from '../src/auth/AuthContext';\n\nconst LoginScreen = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { login } = useAuth();\n  const router = useRouter();\n\n  WebBrowser.maybeCompleteAuthSession();\n\n  const handleLogin = async () => {\n    if (!email || !password) {\n      Alert.alert('Missing Information', 'Please enter both email and password.');\n      return;\n    }\n    try {\n      await login(email, password);\n      console.log('Login successful!');\n    } catch (error: any) {\n      Alert.alert('Login Failed', error.message || 'An unknown error occurred.');\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      const redirectUri = AuthSession.makeRedirectUri({ useProxy: true });\n      const discovery = {\n        authorizationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth',\n        tokenEndpoint: 'https://oauth2.googleapis.com/token',\n        revocationEndpoint: 'https://oauth2.googleapis.com/revoke',\n      };\n      const clientId = '1737513953-i4askqbqfc8af7fdf8auc9d1tss4jalm.apps.googleusercontent.com';\n      const scopes = ['openid', 'profile', 'email'];\n      const authRequest = new AuthSession.AuthRequest({\n        clientId,\n        redirectUri,\n        scopes,\n        responseType: AuthSession.ResponseType.IdToken,\n        usePKCE: false,\n        extraParams: { nonce: Math.random().toString(36).slice(2), prompt: 'select_account' },\n      });\n      const result = await authRequest.promptAsync(discovery, { useProxy: true });\n      if (result.type === 'success' && (result as any).params?.id_token) {\n        const idToken = (result as any).params.id_token as string;\n        Alert.alert('Google Sign-In', 'Google authentication successful');\n        // TODO: verify idToken or exchange with backend / Firebase\n      } else {\n        Alert.alert('Google Sign-In', 'Cancelled or no token.');\n      }\n    } catch (e: any) {\n      Alert.alert('Google Sign-In Failed', e?.message || 'Unknown error');\n    }\n  };\n\n\n  return (\n    <LinearGradient colors={[\"#ecfdf5\", \"#d1fae5\"]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.gradient}>\n      <View style={styles.decorTopRight} />\n      <View style={styles.decorBottomLeft} />\n      <View style={styles.container}>\n        <View style={styles.brandRow}>\n          <Image source={require('../assets/images/Gemini_Generated_Image_4iaitt4iaitt4iai.png')} style={styles.logo} />\n          <Text style={styles.brand}>Native Finance</Text>\n        </View>\n\n        <Text style={styles.header}>Welcome Back</Text>\n        <Text style={styles.subtitle}>Log in to manage your finances.</Text>\n\n        <TextInput\n          style={styles.input}\n          placeholder=\"Email address\"\n          placeholderTextColor=\"#64748b\"\n          value={email}\n          onChangeText={setEmail}\n          keyboardType=\"email-address\"\n          autoCapitalize=\"none\"\n        />\n        <TextInput\n          style={styles.input}\n          placeholder=\"Password\"\n          placeholderTextColor=\"#64748b\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry\n        />\n\n        <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>\n          <Text style={styles.loginButtonText}>Log In</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.googleButton} onPress={handleGoogleSignIn}>\n          <Image source={{ uri: 'https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg' }} style={styles.googleIcon} />\n          <Text style={styles.googleText}>Continue with Google</Text>\n        </TouchableOpacity>\n\n        <View style={styles.registerPromptContainer}>\n          <Text style={styles.registerPromptText}>No account yet? </Text>\n          <TouchableOpacity onPress={() => router.push('/register')}>\n            <Text style={styles.registerLink}>Register here</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </LinearGradient>\n  );\n};\n\nconst styles = StyleSheet.create({\n  gradient: { flex: 1 },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 24,\n  },\n  brandRow: { flexDirection: 'row', alignItems: 'center', justifyContent: 'center', marginBottom: 20 },\n  logo: { width: 90, height: 90, borderRadius: 28, marginRight: 15 },\n  brand: { fontSize: 40, fontWeight: '900', color: '#047857' },\n  header: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: '#047857',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: 'center',\n    color: '#64748b',\n    marginBottom: 32,\n  },\n  input: {\n    height: 50,\n    borderColor: '#cbd5e1',\n    borderWidth: 1,\n    borderRadius: 12,\n    marginBottom: 16,\n    paddingHorizontal: 16,\n    backgroundColor: '#ffffff',\n    fontSize: 16,\n  },\n  loginButton: {\n    backgroundColor: '#059669',\n    paddingVertical: 14,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginTop: 8,\n    shadowColor: '#059669',\n    shadowOpacity: 0.25,\n    shadowRadius: 8,\n    shadowOffset: { width: 0, height: 4 },\n    elevation: 2,\n  },\n  loginButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '700',\n  },\n  googleButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#ffffff',\n    paddingVertical: 12,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    marginTop: 12,\n  },\n  googleIcon: { width: 20, height: 20, marginRight: 8 },\n  googleText: { color: '#0f172a', fontWeight: '700' },\n  registerPromptContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginTop: 24,\n  },\n  registerPromptText: {\n    fontSize: 14,\n    color: '#475569',\n  },\n  registerLink: {\n    fontSize: 14,\n    fontWeight: '700',\n    color: '#059669',\n  },\n  decorTopRight: {\n    position: 'absolute',\n    width: 180,\n    height: 180,\n    borderRadius: 90,\n    backgroundColor: '#bbf7d0',\n    right: -60,\n    top: -40,\n  },\n  decorBottomLeft: {\n    position: 'absolute',\n    width: 220,\n    height: 220,\n    borderRadius: 110,\n    backgroundColor: '#a7f3d0',\n    left: -80,\n    bottom: -60,\n  },\n});\n\nexport default LoginScreen;\n","size_bytes":6514},"app/register.tsx":{"content":"\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useRouter } from 'expo-router';\nimport React, { useState } from 'react';\nimport { Alert, Image, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { useAuth } from '../src/auth/AuthContext';\n\nconst RegisterScreen = () => {\n  const router = useRouter();\n  const { register } = useAuth();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const handleRegister = async () => {\n    try {\n      if (!name.trim() || !email.trim() || !password) {\n        Alert.alert('Missing Information', 'Please fill all fields.');\n        return;\n      }\n      if (password !== confirmPassword) {\n        Alert.alert('Password Mismatch', 'Password and Confirm Password must match.');\n        return;\n      }\n      await register(name, email, password);\n      console.log('Registration successful!');\n    } catch (error: any) {\n      alert(`Registration failed: ${error.message}`);\n    }\n  };\n\n  return (\n    <LinearGradient colors={[\"#ecfdf5\", \"#d1fae5\"]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.gradient}>\n      <View style={styles.decorTopRight} />\n      <View style={styles.decorBottomLeft} />\n      <View style={styles.container}>\n        <View style={styles.brandRow}>\n          <Image source={require('../assets/images/Gemini_Generated_Image_4iaitt4iaitt4iai.png')} style={styles.logo} />\n          <Text style={styles.brand}>Native Finance</Text>\n        </View>\n\n        <Text style={styles.header}>Create Account</Text>\n        <Text style={styles.subtitle}>Get started with your personal finance tracker.</Text>\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Full Name\"\n          placeholderTextColor=\"#64748b\"\n          value={name}\n          onChangeText={setName}\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Email\"\n          placeholderTextColor=\"#64748b\"\n          value={email}\n          onChangeText={setEmail}\n          keyboardType=\"email-address\"\n          autoCapitalize=\"none\"\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Password\"\n          placeholderTextColor=\"#64748b\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Confirm Password\"\n          placeholderTextColor=\"#64748b\"\n          value={confirmPassword}\n          onChangeText={setConfirmPassword}\n          secureTextEntry\n        />\n\n        <TouchableOpacity style={styles.registerButton} onPress={handleRegister}>\n          <Text style={styles.registerButtonText}>Create Account</Text>\n        </TouchableOpacity>\n\n        <View style={styles.loginPromptContainer}>\n          <Text style={styles.loginPromptText}>Already have an account? </Text>\n          <TouchableOpacity onPress={() => router.push('/login')}>\n            <Text style={styles.loginLink}>Log in</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </LinearGradient>\n  );\n};\n\nconst styles = StyleSheet.create({\n  gradient: { flex: 1 },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 24,\n  },\n  brandRow: { flexDirection: 'row', alignItems: 'center', justifyContent: 'center', marginBottom: 20 },\n  logo: { width: 90, height: 90, borderRadius: 28, marginRight: 15 },\n  brand: { fontSize: 40, fontWeight: '900', color: '#047857' },\n  header: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: '#047857',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 16,\n    textAlign: 'center',\n    color: '#64748b',\n    marginBottom: 32,\n  },\n  input: {\n    height: 50,\n    borderColor: '#cbd5e1',\n    borderWidth: 1,\n    borderRadius: 12,\n    marginBottom: 16,\n    paddingHorizontal: 16,\n    backgroundColor: '#ffffff',\n    fontSize: 16,\n  },\n  registerButton: {\n    backgroundColor: '#059669',\n    paddingVertical: 14,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginTop: 8,\n    shadowColor: '#059669',\n    shadowOpacity: 0.25,\n    shadowRadius: 8,\n    shadowOffset: { width: 0, height: 4 },\n    elevation: 2,\n  },\n  registerButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '700',\n  },\n  loginPromptContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginTop: 24,\n  },\n  loginPromptText: {\n    fontSize: 14,\n    color: '#475569',\n  },\n  loginLink: {\n    fontSize: 14,\n    fontWeight: '700',\n    color: '#059669',\n  },\n  decorTopRight: {\n    position: 'absolute',\n    width: 180,\n    height: 180,\n    borderRadius: 90,\n    backgroundColor: '#bbf7d0',\n    right: -60,\n    top: -40,\n  },\n  decorBottomLeft: {\n    position: 'absolute',\n    width: 220,\n    height: 220,\n    borderRadius: 110,\n    backgroundColor: '#a7f3d0',\n    left: -80,\n    bottom: -60,\n  },\n});\n\nexport default RegisterScreen;\n","size_bytes":5070},"src/firebase.ts":{"content":"\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, initializeAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.EXPO_PUBLIC_FIREBASE_API_KEY || \"AIzaSyBf1mwimmgiDavo_Ytnh28-6R8LSkMUnkc\",\n  authDomain: process.env.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN || \"nativefinanceapp.firebaseapp.com\",\n  projectId: process.env.EXPO_PUBLIC_FIREBASE_PROJECT_ID || \"nativefinanceapp\",\n  storageBucket: process.env.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET || \"nativefinanceapp.firebasestorage.app\",\n  messagingSenderId: process.env.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || \"1737513953\",\n  appId: process.env.EXPO_PUBLIC_FIREBASE_APP_ID || \"1:1737513953:web:59a286ce1d7a926d28d0a0\",\n  measurementId: process.env.EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID || \"G-0B3YWRSNYE\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nlet authInstance;\ntry {\n  // Dynamically require to avoid type/resolve issues if subpath is missing\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const { getReactNativePersistence } = require('firebase/auth/react-native');\n  authInstance = initializeAuth(app, {\n    persistence: getReactNativePersistence(AsyncStorage),\n  });\n} catch (e) {\n  // Fallback to default auth without persistence if RN helpers are unavailable\n  authInstance = getAuth(app);\n}\n\nexport const auth = authInstance;\nexport const db = getFirestore(app);\n\n","size_bytes":1563},"src/theme.ts":{"content":"export const colors = {\n  background: '#ecfdf5', // light mint (matches login/register)\n  card: '#ffffff',\n  surface: '#ffffff',\n  textPrimary: '#0f172a', // slate-900\n  textSecondary: '#64748b', // slate-500\n  border: '#e2e8f0',\n  income: '#34d399', // emerald-400\n  expense: '#f87171', // red-400\n  accent: '#10b981', // emerald-500\n};\n\nexport const gradients: {\n  screen: [string, string, ...string[]];\n  card: [string, string, ...string[]];\n  income: [string, string, ...string[]];\n  expense: [string, string, ...string[]];\n} = {\n  screen: ['#ecfdf5', '#d1fae5'],\n  card: ['#ffffff', '#f8fafc'],\n  income: ['#34d399', '#a7f3d0'],\n  expense: ['#f87171', '#fecaca'],\n};\n\nexport const spacing = {\n  xs: 6,\n  sm: 10,\n  md: 16,\n  lg: 20,\n  xl: 28,\n};\n\nexport const radius = {\n  sm: 8,\n  md: 12,\n  lg: 16,\n};\n\nexport const typography = {\n  title: {\n    fontSize: 24,\n    fontWeight: '700' as const,\n    color: colors.textPrimary,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: colors.textSecondary,\n  },\n  label: {\n    fontSize: 13,\n    color: colors.textSecondary,\n  },\n};\n\n\n","size_bytes":1075},"app/(tabs)/_layout.tsx":{"content":"\nimport { useAuth } from '@/src/auth/AuthContext';\nimport { Ionicons } from '@expo/vector-icons';\nimport Constants from 'expo-constants';\nimport { Tabs, useRouter } from 'expo-router';\nimport React, { useState } from 'react';\nimport { Image, Modal, Platform, Pressable, SafeAreaView, Text, TouchableOpacity, View } from 'react-native';\n\nfunction AppHeader() {\n  const { logout } = useAuth();\n  const [showMenu, setShowMenu] = useState(false);\n  const router = useRouter();\n\n  const statusPad = Platform.OS === 'android' ? (Constants.statusBarHeight || 0) : 0;\n\n  return (\n    <SafeAreaView style={{ backgroundColor: 'white' }}>\n      <View\n        style={{\n          paddingTop: statusPad,\n          height: 80 + statusPad,\n          backgroundColor: 'white',\n          flexDirection: 'row',\n          alignItems: 'center',\n          paddingHorizontal: 16,\n          borderBottomWidth: 1,\n          borderBottomColor: '#e2e8f0',\n          justifyContent: 'space-between',\n        }}\n      >\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <Image source={require('../../assets/images/Gemini_Generated_Image_4iaitt4iaitt4iai.png')} style={{ width: 36, height: 36, borderRadius: 18, marginRight: 10 }} />\n          <Text style={{ fontSize: 20, fontWeight: '800', color: '#059669' }}>Native Finance</Text>\n        </View>\n\n        <View>\n          <TouchableOpacity onPress={() => setShowMenu((s) => !s)} activeOpacity={0.8}>\n            <Image\n              source={{ uri: 'https://i.pravatar.cc/100?img=12' }}\n              style={{ width: 34, height: 34, borderRadius: 17 }}\n            />\n          </TouchableOpacity>\n          <Modal\n            visible={showMenu}\n            transparent\n            animationType=\"fade\"\n            onRequestClose={() => setShowMenu(false)}\n          >\n            <Pressable style={{ flex: 1 }} onPress={() => setShowMenu(false)}>\n              <View style={{ flex: 1 }}>\n                <View\n                  style={{\n                    position: 'absolute',\n                    top: statusPad + 40,\n                    right: 4,\n                    backgroundColor: 'white',\n                    borderRadius: 8,\n                    paddingVertical: 6,\n                    minWidth: 160,\n                    shadowColor: '#000',\n                    shadowOpacity: 0.15,\n                    shadowRadius: 8,\n                    shadowOffset: { width: 0, height: 3 },\n                    elevation: 4,\n                    borderWidth: 1,\n                    borderColor: '#e2e8f0',\n                  }}\n                >\n                  <TouchableOpacity\n                    onPress={() => { setShowMenu(false); router.push({ pathname: '/' }); }}\n                    style={{ paddingHorizontal: 12, paddingVertical: 10, flexDirection: 'row', alignItems: 'center' }}\n                  >\n                    <Ionicons name=\"home-outline\" size={18} color=\"#0f172a\" />\n                    <Text style={{ marginLeft: 8, color: '#0f172a', fontWeight: '600' }}>Dashboard</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    onPress={() => { setShowMenu(false); router.push({ pathname: '/transactions' }); }}\n                    style={{ paddingHorizontal: 12, paddingVertical: 10, flexDirection: 'row', alignItems: 'center' }}\n                  >\n                    <Ionicons name=\"list-outline\" size={18} color=\"#0f172a\" />\n                    <Text style={{ marginLeft: 8, color: '#0f172a', fontWeight: '600' }}>Transactions</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    onPress={() => { setShowMenu(false); router.push({ pathname: '/financilagoal' }); }}\n                    style={{ paddingHorizontal: 12, paddingVertical: 10, flexDirection: 'row', alignItems: 'center' }}\n                  >\n                    <Ionicons name=\"trophy-outline\" size={18} color=\"#0f172a\" />\n                    <Text style={{ marginLeft: 8, color: '#0f172a', fontWeight: '600' }}>Goals</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    onPress={() => { setShowMenu(false); router.push({ pathname: '/' }); }}\n                    style={{ paddingHorizontal: 12, paddingVertical: 10, flexDirection: 'row', alignItems: 'center' }}\n                  >\n                    <Ionicons name=\"person-circle-outline\" size={18} color=\"#0f172a\" />\n                    <Text style={{ marginLeft: 8, color: '#0f172a', fontWeight: '600' }}>Profile</Text>\n                  </TouchableOpacity>\n                  <View style={{ height: 1, backgroundColor: '#e2e8f0', marginVertical: 4 }} />\n                  <TouchableOpacity\n                    onPress={async () => {\n                      setShowMenu(false);\n                      await logout();\n                    }}\n                    style={{ paddingHorizontal: 12, paddingVertical: 10, flexDirection: 'row', alignItems: 'center' }}\n                  >\n                    <Ionicons name=\"log-out-outline\" size={18} color=\"#ef4444\" />\n                    <Text style={{ marginLeft: 8, color: '#ef4444', fontWeight: '700' }}>Logout</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            </Pressable>\n          </Modal>\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nexport default function TabLayout() {\n  const { user } = useAuth();\n\n  return (\n    <Tabs\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName: React.ComponentProps<typeof Ionicons>['name'] = 'alert-circle';\n\n          if (route.name === 'index') {\n            iconName = focused ? 'home' : 'home-outline';\n          } else if (route.name === 'transactions') {\n            iconName = focused ? 'list' : 'list-outline';\n          } else if (route.name === 'analysis') {\n            iconName = focused ? 'trophy' : 'trophy-outline';\n          }\n\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n        tabBarActiveTintColor: '#059669', // emerald-600\n        tabBarInactiveTintColor: '#64748b', // slate-500\n        headerShown: true,\n        header: () => <AppHeader />,\n      })}\n    >\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Dashboard',\n        }}\n      />\n      <Tabs.Screen\n        name=\"transactions\"\n        options={{\n          title: 'Transactions',\n        }}\n      />\n      <Tabs.Screen\n        name=\"analysis\"\n        options={{\n          title: 'Goals',\n        }}\n      />\n    </Tabs>\n  );\n}\n","size_bytes":6612},"app/(tabs)/analysis.tsx":{"content":"\nimport { colors, gradients, radius, spacing, typography } from '@/src/theme';\nimport { useTransactions } from '@/src/transactions/TransactionsContext';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport React, { useMemo, useState } from 'react';\nimport { Dimensions, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { PieChart } from 'react-native-chart-kit';\n\nconst { width } = Dimensions.get('window');\n\n// Pre-defined colors for categories for a better look\nconst categoryColors = {\n    Food: '#f59e0b', // amber-500\n    Transport: '#3b82f6', // blue-500\n    Shopping: '#8b5cf6', // violet-500\n    Bills: '#ef4444', // red-500\n    Entertainment: '#14b8a6', // teal-500\n    Salary: '#10b981', // emerald-500 (though usually not in expenses)\n    Other: '#64748b', // slate-500\n};\n\nconst AnalysisScreen = () => {\n  const { transactions, loading } = useTransactions();\n  const [filterDays, setFilterDays] = useState(30); // 7, 30, all\n\n  const filteredTransactions = useMemo(() => {\n    if (filterDays === 'all') return transactions;\n    const dateToCompare = new Date();\n    dateToCompare.setDate(dateToCompare.getDate() - filterDays);\n    return transactions.filter(t => new Date(t.date) >= dateToCompare);\n  }, [transactions, filterDays]);\n\n  // Calculate data for the pie chart and the summary list\n  const analysisData = useMemo(() => {\n    const expenseTransactions = filteredTransactions.filter(t => t.type === 'expense');\n    const categoryTotals = expenseTransactions.reduce((acc, t) => {\n      acc[t.category] = (acc[t.category] || 0) + t.amount;\n      return acc;\n    }, {});\n\n    const pieChartData = Object.keys(categoryTotals).map(category => ({\n      name: category,\n      population: categoryTotals[category],\n      color: categoryColors[category] || categoryColors.Other,\n      legendFontColor: '#7F7F7F', // Color for the legend text\n      legendFontSize: 14,\n    }));\n\n    const totalExpense = expenseTransactions.reduce((sum, t) => sum + t.amount, 0);\n\n    return { pieChartData, categoryTotals, totalExpense };\n  }, [filteredTransactions]);\n\n  if (loading) {\n    return <Text>Loading...</Text>;\n  }\n\n  return (\n    <ScrollView style={styles.container}>\n      <LinearGradient colors={gradients.screen} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={{ flex: 1 }}>\n      <Text style={styles.title}>Financial Analysis</Text>\n\n      <View style={styles.filterContainer}>\n        <TouchableOpacity onPress={() => setFilterDays(7)} style={[styles.filterButton, filterDays === 7 && styles.activeFilter]}>\n          <Text style={[styles.filterText, filterDays === 7 && styles.activeFilterText]}>Last 7 Days</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => setFilterDays(30)} style={[styles.filterButton, filterDays === 30 && styles.activeFilter]}>\n          <Text style={[styles.filterText, filterDays === 30 && styles.activeFilterText]}>Last 30 Days</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => setFilterDays('all')} style={[styles.filterButton, filterDays === 'all' && styles.activeFilter]}>\n          <Text style={[styles.filterText, filterDays === 'all' && styles.activeFilterText]}>All Time</Text>\n        </TouchableOpacity>\n      </View>\n\n      {analysisData.pieChartData.length > 0 ? (\n        <View style={styles.card}>\n          <PieChart\n            data={analysisData.pieChartData}\n            width={width - 32}\n            height={220}\n            chartConfig={{\n              color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n              labelColor: (opacity = 1) => `rgba(148, 163, 184, ${opacity})`,\n            }}\n            accessor={\"population\"}\n            backgroundColor={\"transparent\"}\n            paddingLeft={\"15\"}\n            center={[10, 10]}\n            hasLegend={true}\n            absolute\n          />\n        </View>\n      ) : (\n        <Text style={styles.emptyText}>No expense data available for this period.</Text>\n      )}\n\n      <View style={styles.summaryContainer}>\n        <Text style={styles.summaryTitle}>Expense Breakdown</Text>\n        {Object.keys(analysisData.categoryTotals).map(category => (\n          <View key={category} style={styles.summaryItem}>\n            <View style={styles.categoryInfo}>\n                <View style={[styles.colorSquare, { backgroundColor: categoryColors[category] || categoryColors.Other }]} />\n                <Text style={styles.categoryText}>{category}</Text>\n            </View>\n                         <Text style={styles.categoryAmount}>LKR {analysisData.categoryTotals[category].toFixed(2)}</Text>\n          </View>\n        ))}\n      </View>\n      </LinearGradient>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: spacing.sm },\n  title: { ...typography.title, textAlign: 'left', padding: spacing.sm },\n  filterContainer: { flexDirection: 'row', justifyContent: 'center', paddingVertical: 16 },\n  filterButton: { paddingVertical: 8, paddingHorizontal: 16, borderRadius: 20, backgroundColor: '#1e293b', marginHorizontal: 4, borderWidth: 1, borderColor: colors.border },\n  activeFilter: { backgroundColor: colors.income },\n  filterText: { color: colors.textSecondary, fontWeight: '600' },\n  activeFilterText: { color: 'white' },\n  card: { backgroundColor: colors.card, padding: spacing.md, borderRadius: radius.lg, marginHorizontal: spacing.md, borderWidth: 1, borderColor: colors.border },\n  summaryContainer: { marginTop: 16, paddingHorizontal: spacing.md },\n  summaryTitle: { fontSize: 18, fontWeight: 'bold', color: colors.textPrimary, marginBottom: 8 },\n  summaryItem: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', paddingVertical: 12, borderBottomWidth: 1, borderBottomColor: colors.border },\n  categoryInfo: { flexDirection: 'row', alignItems: 'center' },\n  colorSquare: { width: 12, height: 12, marginRight: 8, borderRadius: 2 },\n  categoryText: { fontSize: 16, color: colors.textSecondary },\n  categoryAmount: { fontSize: 16, fontWeight: '500', color: colors.textPrimary },\n  emptyText: { textAlign: 'center', marginTop: 20, color: colors.textSecondary },\n});\n\nexport default AnalysisScreen;\n","size_bytes":6231},"app/(tabs)/financilagoal.tsx":{"content":"import Card from '@/components/ui/Card';\nimport { useAuth } from '@/src/auth/AuthContext';\nimport { db } from '@/src/firebase';\nimport { colors, radius, spacing, typography } from '@/src/theme';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport {\n    addDoc,\n    collection,\n    deleteDoc,\n    doc,\n    onSnapshot,\n    query,\n    serverTimestamp,\n    updateDoc,\n} from 'firebase/firestore';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport {\n    ActivityIndicator,\n    Alert,\n    FlatList,\n    Modal,\n    RefreshControl,\n    StyleSheet,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from 'react-native';\n\ntype Goal = {\n  id: string;\n  title: string;\n  target: number;\n  amountSaved?: number;\n  createdAt?: any;\n};\n\nexport default function GoalScreen() {\n  const { user } = useAuth();\n  const [goals, setGoals] = useState<Goal[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  // New-goal inputs\n  const [newTitle, setNewTitle] = useState('');\n  const [newTarget, setNewTarget] = useState('');\n  const [newSaved, setNewSaved] = useState('');\n\n  // Edit modal\n  const [editing, setEditing] = useState<Goal | null>(null);\n  const [editVisible, setEditVisible] = useState(false);\n\n  // Sorting\n  const [sortBy, setSortBy] = useState<'created' | 'progress'>('created');\n\n  const loadGoalsListener = useCallback(() => {\n    if (!user) {\n      setGoals([]);\n      setLoading(false);\n      return () => {};\n    }\n\n    setLoading(true);\n    const ref = collection(db, 'users', user.uid, 'goals');\n    const q = query(ref);\n    const unsub = onSnapshot(\n      q,\n      (snap) => {\n        const arr: Goal[] = [];\n        snap.forEach((d) => {\n          const data = d.data() as any;\n          arr.push({\n            id: d.id,\n            title: data.title || 'Untitled',\n            target: typeof data.target === 'number' ? data.target : 0,\n            amountSaved: typeof data.amountSaved === 'number' ? data.amountSaved : 0,\n            createdAt: data.createdAt,\n          });\n        });\n\n        const sorted = arr.sort((a, b) => {\n          if (sortBy === 'created') return (b.createdAt?.seconds || 0) - (a.createdAt?.seconds || 0);\n          const pa = a.target > 0 ? (a.amountSaved || 0) / a.target : 0;\n          const pb = b.target > 0 ? (b.amountSaved || 0) / b.target : 0;\n          return pb - pa;\n        });\n\n        setGoals(sorted);\n        setLoading(false);\n      },\n      (err) => {\n        console.error('Goals listener error', err);\n        setLoading(false);\n      }\n    );\n\n    return unsub;\n  }, [user, sortBy]);\n\n  useEffect(() => {\n    const unsub = loadGoalsListener();\n    return () => unsub && unsub();\n  }, [loadGoalsListener]);\n\n  const onRefresh = async () => {\n    setRefreshing(true);\n    setTimeout(() => setRefreshing(false), 600);\n  };\n\n  const validateTitle = (t: string) => t.trim().length > 0;\n  const validatePositive = (v: string) => {\n    const n = Number(v);\n    return !Number.isNaN(n) && n > 0;\n  };\n\n  const createGoal = async () => {\n    if (!user) return Alert.alert('Not signed in', 'Sign in to save goals.');\n    if (!validateTitle(newTitle)) return Alert.alert('Invalid title', 'Please enter a goal title.');\n    if (!validatePositive(newTarget)) return Alert.alert('Invalid target', 'Enter a target greater than 0.');\n\n    try {\n      await addDoc(collection(db, 'users', user.uid, 'goals'), {\n        userId: user.uid,\n        title: newTitle.trim(),\n        target: Number(newTarget),\n        amountSaved: Number(newSaved) || 0,\n        createdAt: serverTimestamp(),\n      });\n      setNewTitle('');\n      setNewTarget('');\n      setNewSaved('');\n    } catch (e) {\n      console.error('Create goal error', e);\n      Alert.alert('Error', 'Could not save goal.');\n    }\n  };\n\n  const confirmDelete = (id: string) => {\n    Alert.alert('Delete goal', 'Are you sure you want to delete this goal?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Delete',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            await deleteDoc(doc(db, 'users', user!.uid, 'goals', id));\n          } catch (e) {\n            console.error('Delete goal error', e);\n            Alert.alert('Error', 'Could not delete goal.');\n          }\n        },\n      },\n    ]);\n  };\n\n  const openEdit = (g: Goal) => {\n    setEditing(g);\n    setEditVisible(true);\n  };\n\n  const saveEdit = async () => {\n    if (!editing || !user) return;\n    if (!validateTitle(editing.title)) return Alert.alert('Invalid title', 'Please enter a goal title.');\n    if (!editing.target || editing.target <= 0) return Alert.alert('Invalid target', 'Target must be greater than 0.');\n\n    try {\n      await updateDoc(doc(db, 'users', user.uid, 'goals', editing.id), {\n        title: editing.title.trim(),\n        target: editing.target,\n        amountSaved: editing.amountSaved || 0,\n      });\n      setEditVisible(false);\n      setEditing(null);\n    } catch (e) {\n      console.error('Save edit error', e);\n      Alert.alert('Error', 'Could not save changes.');\n    }\n  };\n\n  const renderGoal = ({ item }: { item: Goal }) => {\n    const saved = typeof item.amountSaved === 'number' ? item.amountSaved : 0;\n    const target = typeof item.target === 'number' && item.target > 0 ? item.target : 0;\n    const ratio = target > 0 ? Math.max(0, Math.min(1, saved / target)) : 0;\n\n    return (\n      <Card style={{ marginBottom: spacing.sm, shadowColor: '#000', shadowOpacity: 0.08, shadowRadius: 8 }}>\n        <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n          <View style={{ flex: 1, paddingRight: 12 }}>\n            <Text style={{ fontWeight: '800', fontSize: 16 }}>{item.title}</Text>\n            <Text style={{ color: colors.textSecondary, marginTop: 6 }}>Target: LKR {target ? target.toFixed(2) : '0.00'}</Text>\n            <View style={{ height: 10, backgroundColor: '#f1f5f9', borderRadius: 8, overflow: 'hidden', marginTop: 12 }}>\n              <View style={{ width: `${ratio * 100}%`, height: '100%', backgroundColor: ratio >= 1 ? colors.income : '#60a5fa' }} />\n            </View>\n            <Text style={{ marginTop: 8, color: colors.textSecondary }}>{Math.round(ratio * 100)}% achieved — LKR {saved.toFixed(2)}</Text>\n          </View>\n\n          <View style={{ flexDirection: 'column', alignItems: 'flex-end' }}>\n            <TouchableOpacity accessibilityLabel={`Edit goal ${item.title}`} onPress={() => openEdit(item)} style={{ paddingHorizontal: 12, paddingVertical: 8 }}>\n              <Text style={{ color: '#0f172a' }}>Edit</Text>\n            </TouchableOpacity>\n            <TouchableOpacity accessibilityLabel={`Delete goal ${item.title}`} onPress={() => confirmDelete(item.id)} style={{ paddingHorizontal: 12, paddingVertical: 8 }}>\n              <Text style={{ color: colors.expense }}>Delete</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Card>\n    );\n  };\n\n  return (\n    <View style={{ flex: 1, padding: spacing.md, backgroundColor: '#f8fafc' }}>\n      <LinearGradient colors={['#ecfdf5', '#d1fae5']} style={{ padding: spacing.md, borderRadius: radius.lg, marginBottom: spacing.md }}>\n        <Text style={{ ...typography.title }}>Financial Goals</Text>\n        <Text style={{ ...typography.subtitle, marginTop: 6 }}>Set targets and track progress toward your savings goals.</Text>\n      </LinearGradient>\n\n      <Card style={{ padding: spacing.md, marginBottom: spacing.md }}>\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <TextInput placeholder=\"Goal title\" value={newTitle} onChangeText={setNewTitle} style={styles.input} accessibilityLabel=\"New goal title\" />\n          <TextInput placeholder=\"Target\" value={newTarget} onChangeText={setNewTarget} style={[styles.input, { width: 120, marginLeft: 8 }]} keyboardType=\"numeric\" accessibilityLabel=\"New goal target\" />\n          <TextInput placeholder=\"Saved\" value={newSaved} onChangeText={setNewSaved} style={[styles.input, { width: 100, marginLeft: 8 }]} keyboardType=\"numeric\" accessibilityLabel=\"Amount already saved\" />\n          <TouchableOpacity style={styles.saveButton} onPress={createGoal} accessibilityLabel=\"Save new goal\">\n            <Text style={{ color: 'white', fontWeight: '700' }}>Save</Text>\n          </TouchableOpacity>\n        </View>\n      </Card>\n\n      <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: spacing.sm }}>\n        <View style={{ flexDirection: 'row' }}>\n          <TouchableOpacity onPress={() => setSortBy('created')} style={{ marginRight: 8 }}>\n            <Text style={{ fontWeight: sortBy === 'created' ? '800' : '600' }}>Newest</Text>\n          </TouchableOpacity>\n          <TouchableOpacity onPress={() => setSortBy('progress')}>\n            <Text style={{ fontWeight: sortBy === 'progress' ? '800' : '600' }}>Top progress</Text>\n          </TouchableOpacity>\n        </View>\n        <View>{loading ? <ActivityIndicator /> : null}</View>\n      </View>\n\n      <FlatList\n        data={goals}\n        keyExtractor={(g) => g.id}\n        renderItem={renderGoal}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n        ListEmptyComponent={!loading ? <View style={{ alignItems: 'center', marginTop: spacing.lg }}><Text style={{ color: colors.textSecondary }}>No goals yet. Add your first financial goal.</Text></View> : null}\n      />\n\n      <Modal visible={editVisible} animationType=\"slide\" transparent onRequestClose={() => setEditVisible(false)}>\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.4)' }}>\n          <Card style={{ width: '92%', padding: spacing.md }}>\n            <Text style={{ fontWeight: '800', fontSize: 18, marginBottom: 8 }}>Edit Goal</Text>\n            <TextInput value={editing?.title} onChangeText={(v) => setEditing((p) => p ? { ...p, title: v } : p)} style={styles.input} placeholder=\"Title\" />\n            <TextInput value={editing ? String(editing.target) : ''} onChangeText={(v) => setEditing((p) => p ? { ...p, target: Number(v) } : p)} style={[styles.input, { marginTop: 8 }]} keyboardType=\"numeric\" placeholder=\"Target\" />\n            <TextInput value={editing ? String(editing.amountSaved || 0) : ''} onChangeText={(v) => setEditing((p) => p ? { ...p, amountSaved: Number(v) } : p)} style={[styles.input, { marginTop: 8 }]} keyboardType=\"numeric\" placeholder=\"Amount saved\" />\n\n            <View style={{ flexDirection: 'row', justifyContent: 'flex-end', marginTop: 12 }}>\n              <TouchableOpacity onPress={() => { setEditVisible(false); setEditing(null); }} style={{ marginRight: 8 }}>\n                <Text>Cancel</Text>\n              </TouchableOpacity>\n              <TouchableOpacity onPress={saveEdit} style={styles.saveButton} accessibilityLabel=\"Save goal changes\">\n                <Text style={{ color: 'white', fontWeight: '700' }}>Save</Text>\n              </TouchableOpacity>\n            </View>\n          </Card>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    flex: 1,\n    borderWidth: 0,\n    backgroundColor: '#f8fafc',\n    padding: 12,\n    borderRadius: 10,\n  },\n  saveButton: {\n    marginLeft: 8,\n    backgroundColor: '#10b981',\n    paddingVertical: 10,\n    paddingHorizontal: 14,\n    borderRadius: 10,\n  },\n});\n","size_bytes":11474},"app/(tabs)/index.tsx":{"content":"\nimport { useAuth } from '@/src/auth/AuthContext';\nimport { colors, gradients, radius, spacing, typography } from '@/src/theme';\nimport { useTransactions } from '@/src/transactions/TransactionsContext';\nimport { Ionicons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useRouter } from 'expo-router';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { ActivityIndicator, Dimensions, LayoutChangeEvent, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { LineChart } from 'react-native-chart-kit';\nimport LineChartBicolor from '../../components/dashboard/LineChartBicolor';\nimport SpendingAnalysis from '../../components/dashboard/SpendingAnalysis';\nimport SummaryChart from '../../components/dashboard/SummaryChart';\nimport TransactionsList from '../../components/ui/TransactionsList';\n\nconst { width } = Dimensions.get('window');\n\nconst DashboardScreen = () => {\n  const { user, logout } = useAuth();\n  const { transactions, loading } = useTransactions();\n  const router = useRouter();\n\n  const [range, setRange] = useState<7 | 30 | 'all'>(7);\n\n  const filteredTransactions = useMemo(() => {\n    if (range === 'all') return transactions;\n    const since = new Date();\n    since.setDate(since.getDate() - range + 1);\n    return transactions.filter(t => new Date(t.date) >= since);\n  }, [transactions, range]);\n\n  const recentTransactions = useMemo(() => {\n    return filteredTransactions\n      .slice()\n      .sort((a, b) => (a.date < b.date ? 1 : -1))\n      .slice(0, 5);\n  }, [filteredTransactions]);\n\n  const totals = useMemo(() => {\n    const income = transactions.filter(t => t.type === 'income').reduce((s, t) => s + t.amount, 0);\n    const expense = transactions.filter(t => t.type === 'expense').reduce((s, t) => s + t.amount, 0);\n    const balance = income - expense;\n    return { income, expense, balance };\n  }, [transactions]);\n\n  // Helper: generate list of dates between start and end (inclusive)\n  const getDateRange = (start: Date, end: Date) => {\n    const arr: string[] = [];\n    const d = new Date(start);\n    while (d <= end) {\n      arr.push(d.toISOString().split('T')[0]);\n      d.setDate(d.getDate() + 1);\n    }\n    return arr;\n  };\n\n  const chartData = useMemo(() => {\n    // Decide date window\n    const today = new Date();\n    let dateStrings: string[] = [];\n\n    if (range === 'all') {\n      // Use full span from earliest transaction to today (limit to 365 days)\n      if (transactions.length === 0) {\n        dateStrings = getDateRange(new Date(today), new Date(today));\n      } else {\n        const earliest = transactions\n          .map(t => new Date(t.date))\n          .reduce((a, b) => (a < b ? a : b));\n        const start = new Date(earliest);\n        dateStrings = getDateRange(start, today).slice(-365);\n      }\n    } else {\n      const days = range;\n      const start = new Date(today);\n      start.setDate(start.getDate() - (days - 1));\n      dateStrings = getDateRange(start, today);\n    }\n\n    const labels = dateStrings.map(ds => new Date(ds).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));\n    const incomeData = dateStrings.map(ds => filteredTransactions.filter(t => t.date === ds && t.type === 'income').reduce((s, t) => s + t.amount, 0));\n    const expenseData = dateStrings.map(ds => filteredTransactions.filter(t => t.date === ds && t.type === 'expense').reduce((s, t) => s + t.amount, 0));\n\n    return {\n      labels,\n      rawDates: dateStrings,\n      datasets: [\n        { data: incomeData, color: (opacity = 1) => `rgba(34, 197, 94, ${opacity})` },\n        { data: expenseData, color: (opacity = 1) => `rgba(239, 68, 68, ${opacity})` },\n      ],\n      legend: ['Income', 'Expense'],\n    };\n  }, [filteredTransactions, range, transactions]);\n\n  // Build balance sparkline using the same date window as chartData so filters align\n  const balanceSparkline = useMemo(() => {\n    const dates: string[] = (chartData as any).rawDates || [];\n    const labels = dates.map(ds => new Date(ds).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));\n    const data = dates.map(ds => {\n      const d = new Date(ds + 'T00:00:00');\n      const income = transactions.filter(t => new Date(t.date) <= d && t.type === 'income').reduce((s, t) => s + t.amount, 0);\n      const expense = transactions.filter(t => new Date(t.date) <= d && t.type === 'expense').reduce((s, t) => s + t.amount, 0);\n      return income - expense;\n    });\n    return { labels, rawDates: dates, datasets: [{ data }] };\n  }, [chartData, transactions]);\n\n  // Tooltip / selection state for charts\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\n  const [selectedLabel, setSelectedLabel] = useState<string>('');\n  const [selectedValue, setSelectedValue] = useState<number | null>(null);\n  const [chartWidthPx, setChartWidthPx] = useState<number>(width - 32);\n  const chartContainerRef = useRef<View | null>(null);\n\n  // When chart data changes, default selection to latest day\n  useEffect(() => {\n    const last = balanceSparkline.datasets[0].data.length - 1;\n    if (last >= 0) {\n      setSelectedIndex(last);\n      setSelectedLabel(balanceSparkline.labels ? balanceSparkline.labels[last] : '');\n      setSelectedValue(balanceSparkline.datasets[0].data[last]);\n    }\n  }, [balanceSparkline, range]);\n\n  const onChartLayout = (e: LayoutChangeEvent) => {\n  const w = e.nativeEvent.layout.width;\n  setChartWidthPx(w);\n  };\n\n  if (loading) {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: colors.background }}>\n        <ActivityIndicator size=\"large\" color={colors.accent} />\n        <Text style={{ marginTop: 12, color: colors.textSecondary }}>Loading your data…</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView style={styles.container}>\n      <LinearGradient colors={gradients.screen} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={styles.gradientLayer}>\n      <View style={styles.header}>\n        <View>\n          <Text style={styles.greeting}>Hello, {user?.name || 'User'}!</Text>\n          <Text style={styles.subGreeting}>Welcome to your financial hub.</Text>\n        </View>\n      </View>\n\n      <View style={styles.summaryContainer}>\n        <LinearGradient colors={[ '#ecfdf5', '#bbf7d0' ]} style={styles.balanceCard} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }}>\n          <Text style={styles.summaryLabelCentered}>Balance</Text>\n          <Text style={styles.summaryValueCentered}>LKR {totals.balance.toFixed(2)}</Text>\n        </LinearGradient>\n\n        <View style={styles.rowBelow}>\n          <LinearGradient colors={[ '#ffffff', '#ecfdf5' ]} style={[styles.halfCard, { marginRight: 8 }]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }}>\n            <Text style={styles.summaryLabelCentered}>Income</Text>\n            <Text style={[styles.summaryValueCentered, { color: colors.income }]}>LKR {totals.income.toFixed(2)}</Text>\n          </LinearGradient>\n          <LinearGradient colors={[ '#ffffff', '#fee2e2' ]} style={[styles.halfCard, { marginLeft: 8 }]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }}>\n            <Text style={styles.summaryLabelCentered}>Expense</Text>\n            <Text style={[styles.summaryValueCentered, { color: colors.expense }]}>LKR {totals.expense.toFixed(2)}</Text>\n          </LinearGradient>\n        </View>\n      </View>\n\n  <TouchableOpacity accessibilityLabel=\"Add new transaction\" style={styles.addButton} onPress={() => router.push({ pathname: '/transactions' })}>\n        <Ionicons name=\"add-circle\" size={22} color=\"white\" />\n        <Text style={styles.addButtonText}>Add New Transaction</Text>\n      </TouchableOpacity>\n     \n\n      <View style={styles.filterRow}>\n        <Text style={styles.sectionTitle}>Overview</Text>\n        <View style={{ flexDirection: 'row' }}>\n          {[7, 30].map(v => (\n            <TouchableOpacity key={v} accessibilityLabel={`Show last ${v} days`} onPress={() => setRange(v as 7 | 30)} style={[styles.filterChip, range === v && styles.filterChipActive]}>\n              <Text style={[styles.filterChipText, range === v && styles.filterChipTextActive]}>{v}d</Text>\n            </TouchableOpacity>\n          ))}\n          <TouchableOpacity accessibilityLabel=\"Show all time\" onPress={() => setRange('all')} style={[styles.filterChip, range === 'all' && styles.filterChipActive]}>\n            <Text style={[styles.filterChipText, range === 'all' && styles.filterChipTextActive]}>All</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Income vs. Expense</Text>\n        <SummaryChart />\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Balance Trend</Text>\n        <View onLayout={onChartLayout} ref={chartContainerRef}>\n          {selectedLabel !== '' && selectedValue !== null && (\n            <View pointerEvents=\"none\" style={{ position: 'relative', height: 0 }}>\n              {/* compute tooltip x from selectedIndex */}\n              <View style={{ position: 'absolute', left: Math.max(8, (selectedIndex !== null && balanceSparkline.labels.length > 1) ? (selectedIndex / (balanceSparkline.labels.length - 1)) * (chartWidthPx) : 8), top: -36 }}>\n                <View style={{ backgroundColor: '#047857', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 10 }}>\n                  <Text style={{ color: 'white', fontWeight: '700' }}>{selectedLabel} — LKR {selectedValue?.toFixed(2)}</Text>\n                </View>\n              </View>\n            </View>\n          )}\n          <LineChartBicolor\n            data={(balanceSparkline.datasets && balanceSparkline.datasets[0] && balanceSparkline.datasets[0].data) || []}\n            width={chartWidthPx || (width - 32)}\n            height={180}\n            strokeWidth={2}\n          />\n        </View>\n      </View>\n\n  <SpendingAnalysis />\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Recent Transactions</Text>\n        {recentTransactions.length > 0 ? (\n          <TransactionsList\n            transactions={recentTransactions as any}\n            categories={[] as any}\n            deleteTransaction={(id: string | number) => {\n              // use TransactionsContext deleteTransaction (available via hook)\n              // fallback: find function from the context earlier\n              return (async () => {\n                const { deleteTransaction } = useTransactions() as any;\n                return deleteTransaction(String(id));\n              })();\n            }}\n            onEdit={(id: string | number) => {\n              // navigate to edit screen\n              router.push({ pathname: '/edit-transaction', params: { id: String(id) } });\n            }}\n          />\n        ) : (\n          <Text style={{ color: colors.textSecondary }}>No recent transactions. Add your first one!</Text>\n        )}\n      </View>\n\n      <View style={styles.actionsRow}>\n  <TouchableOpacity accessibilityLabel=\"View goals\" style={styles.quickAction} onPress={() => router.push({ pathname: '/financilagoal' })}>\n          <Ionicons name=\"trophy\" size={22} color=\"#047857\" />\n          <Text style={styles.quickActionText}>Goals</Text>\n        </TouchableOpacity>\n  <TouchableOpacity accessibilityLabel=\"Budget settings\" style={styles.quickAction} onPress={() => router.push({ pathname: '/transactions' })}>\n          <Ionicons name=\"wallet\" size={22} color=\"#047857\" />\n          <Text style={styles.quickActionText}>Budget</Text>\n        </TouchableOpacity>\n  <TouchableOpacity accessibilityLabel=\"Manage categories\" style={styles.quickAction} onPress={() => router.push({ pathname: '/transactions' })}>\n          <Ionicons name=\"pricetags\" size={22} color=\"#047857\" />\n          <Text style={styles.quickActionText}>Categories</Text>\n        </TouchableOpacity>\n      </View>\n      </LinearGradient>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background },\n  gradientLayer: { flex: 1 },\n  header: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', padding: spacing.md },\n  greeting: { ...typography.title },\n  subGreeting: { ...typography.subtitle },\n  summaryContainer: { flexDirection: 'column', padding: spacing.md },\n  summaryBox: { alignItems: 'center' },\n  balanceCard: { width: '100%', padding: spacing.lg, borderRadius: radius.lg, marginBottom: spacing.sm, borderWidth: 1, borderColor: colors.border, minHeight: 120, justifyContent: 'center', alignItems: 'center' },\n  rowBelow: { flexDirection: 'row', justifyContent: 'space-between', marginTop: spacing.sm },\n  halfCard: { flex: 1, padding: spacing.md, borderRadius: radius.lg, borderWidth: 1, borderColor: colors.border, justifyContent: 'center', alignItems: 'center' },\n  summaryLabel: { ...typography.label },\n  summaryValue: { fontSize: 20, fontWeight: 'bold', color: colors.textPrimary },\n  summaryLabelCentered: { ...typography.label, textAlign: 'center', fontSize: 18 },\n  summaryValueCentered: { fontSize: 28, fontWeight: '800', color: colors.textPrimary, textAlign: 'center', textShadowColor: 'rgba(4,120,87,0.12)', textShadowOffset: { width: 0, height: 4 }, textShadowRadius: 6 },\n  addButton: { flexDirection: 'row', backgroundColor: colors.income, padding: 14, borderRadius: radius.md, alignItems: 'center', justifyContent: 'center', marginHorizontal: spacing.md, marginVertical: spacing.sm },\n  addButtonText: { color: 'white', fontSize: 16, fontWeight: '600', marginLeft: 8 },\n  section: { backgroundColor: colors.card, padding: spacing.md, marginVertical: spacing.sm, borderRadius: radius.lg, borderWidth: 1, borderColor: colors.border },\n  sectionTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 8, color: colors.textPrimary },\n  transactionItem: { flexDirection: 'row', justifyContent: 'space-between', paddingVertical: 12, borderBottomWidth: 1, borderBottomColor: colors.border },\n  transactionDesc: { fontSize: 16, color: colors.textPrimary },\n  transactionDate: { fontSize: 12, color: colors.textSecondary },\n  transactionAmount: { fontSize: 16, fontWeight: 'bold' },\n  income: { color: colors.income },\n  expense: { color: colors.expense },\n  filterRow: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', paddingHorizontal: spacing.md, marginTop: spacing.sm },\n  filterChip: { paddingVertical: 6, paddingHorizontal: 12, borderRadius: 16, backgroundColor: '#e2e8f0', marginLeft: 6 },\n  filterChipActive: { backgroundColor: colors.income },\n  filterChipText: { color: '#475569', fontWeight: '600' },\n  filterChipTextActive: { color: 'white' },\n  actionsRow: { flexDirection: 'row', justifyContent: 'space-around', paddingHorizontal: spacing.md, marginVertical: spacing.sm },\n  quickAction: { flexDirection: 'row', alignItems: 'center', backgroundColor: '#ffffff', paddingVertical: 8, paddingHorizontal: 12, borderRadius: 12, borderColor: colors.border, borderWidth: 1 },\n  quickActionText: { marginLeft: 6, color: colors.textPrimary, fontWeight: '600' },\n});\n\nexport default DashboardScreen;\n","size_bytes":15146},"app/(tabs)/transactions.tsx":{"content":"\nimport { useAuth } from '@/src/auth/AuthContext';\nimport { colors, gradients, radius, spacing, typography } from '@/src/theme';\nimport { useTransactions } from '@/src/transactions/TransactionsContext';\nimport { Ionicons } from '@expo/vector-icons';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useLocalSearchParams, useRouter } from 'expo-router';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { FlatList, SafeAreaView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';\n\n// A more detailed transaction item\ninterface TransactionItemProps {\n  transaction: { id: string; description: string; amount: number; category: string; type: 'income' | 'expense'; date: string };\n  onDelete: (id: string) => void;\n  onEdit: (t: TransactionItemProps['transaction']) => void;\n}\nconst TransactionItem = ({ transaction, onDelete, onEdit }: TransactionItemProps) => (\n  <View style={styles.transactionItem}>\n    <View style={styles.transactionDetails}>\n      <Text style={styles.transactionDesc}>{transaction.description}</Text>\n      <Text style={styles.transactionSub}>{transaction.category} | {transaction.date}</Text>\n    </View>\n    <Text style={[styles.transactionAmount, transaction.type === 'income' ? styles.income : styles.expense]}>\n      {transaction.type === 'income' ? '+' : '-'} {transaction.amount.toFixed(2)} LKR\n    </Text>\n    <View style={styles.transactionActions}>\n        <TouchableOpacity onPress={() => onEdit(transaction)} style={styles.actionButton}>\n            <Ionicons name=\"pencil-outline\" size={20} color=\"#2563eb\" />\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => onDelete(transaction.id)} style={styles.actionButton}>\n            <Ionicons name=\"trash-outline\" size={20} color=\"#ef4444\" />\n        </TouchableOpacity>\n    </View>\n  </View>\n);\n\nexport default function TransactionsScreen() {\n  const { transactions, loading, deleteTransaction, addTransaction, updateTransaction } = useTransactions();\n  const { user, updateUserCustomCategories } = useAuth();\n  const [filter, setFilter] = useState('all'); // 'all', 'income', 'expense'\n  const router = useRouter();\n  const params = useLocalSearchParams();\n  const [showAddPrompt, setShowAddPrompt] = useState(false);\n\n  // Inline form state\n  const defaultCategories = {\n    income: ['Salary', 'Freelance', 'Gift', 'Other'],\n    expense: ['Food', 'Transport', 'Shopping', 'Bills', 'Entertainment', 'Other'],\n  } as const;\n  const [type, setType] = useState<'income' | 'expense' | ''>('');\n  const [category, setCategory] = useState<string>('');\n  const [customCategory, setCustomCategory] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [date, setDate] = useState<string>('');\n  const [showDatePicker, setShowDatePicker] = useState<boolean>(false);\n  const [dateObj, setDateObj] = useState<Date>(new Date());\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [editingId, setEditingId] = useState<string | null>(null);\n\n  const userCustomCategories = useMemo(() => {\n  // Normalize stored custom categories to an object with arrays. Stored values may be strings or objects { name, emoji }\n  const raw = user?.customCategories || { expense: [], income: [] };\n  const normalize = (arr: any[]) => arr.map(item => (typeof item === 'string' ? item : item?.name ?? ''));\n  return { expense: normalize(raw.expense || []), income: normalize(raw.income || []) };\n  }, [user]);\n\n  const combinedCategories = useMemo(() => {\n    if (!type) return [] as string[];\n  const base = type === 'income' ? defaultCategories.income : defaultCategories.expense;\n  const customs = (userCustomCategories[type] || []) as string[];\n  // ensure unique and string labels only\n  const merged = Array.from(new Set([...base, ...customs.filter(Boolean)]));\n  return [...merged, '+ Add Category'];\n  }, [type, userCustomCategories]);\n\n  useEffect(() => {\n    if (params?.openForm === 'true') {\n      setShowAddPrompt(true);\n    }\n  }, [params]);\n\n  // Default date to today on mount\n  useEffect(() => {\n    const today = new Date();\n    setDate(today.toISOString().split('T')[0]);\n    setDateObj(today);\n  }, []);\n\n  const resetForm = () => {\n    setType('');\n    setCategory('');\n    setCustomCategory('');\n    setDescription('');\n    setAmount('');\n    setDate('');\n    setIsEditing(false);\n    setEditingId(null);\n  };\n\n  const handleAddCustomCategory = async () => {\n    if (!type) return;\n    const trimmed = customCategory.trim();\n    if (!trimmed) return;\n    const existingNames = (userCustomCategories[type] || []) as string[];\n    const existing = new Set(existingNames);\n    if (!existing.has(trimmed)) {\n      const updated = [...existingNames, trimmed];\n      if (user && updateUserCustomCategories) {\n        await updateUserCustomCategories(user.uid, type, updated as string[]);\n      }\n    }\n    setCategory(trimmed);\n    setCustomCategory('');\n  };\n\n  const onSubmitForm = async () => {\n    if (!type || !description.trim() || !amount || !date) return;\n    const parsedAmount = parseFloat(amount);\n    if (Number.isNaN(parsedAmount)) return;\n  const finalCategory = category === '+ Add Category' ? customCategory.trim() : category;\n    if (!finalCategory) return;\n    if (isEditing && editingId) {\n      // perform in-place update using TransactionsContext\n      try {\n        await updateTransaction(editingId, {\n          description: description.trim(),\n          amount: parsedAmount,\n          category: finalCategory,\n          type,\n          date,\n        });\n      } catch (err) {\n        console.error('Failed to update transaction', err);\n      }\n      resetForm();\n      return;\n    }\n\n    await addTransaction({\n      description: description.trim(),\n      amount: parsedAmount,\n      category: finalCategory,\n      type: type,\n      date,\n    });\n    resetForm();\n  };\n\n  const filteredTransactions = useMemo(() => {\n    if (filter === 'all') return transactions;\n    return transactions.filter(t => t.type === filter);\n  }, [transactions, filter]);\n  \n  const onEdit = (transaction: TransactionItemProps['transaction']) => {\n    // Prefill inline form for editing\n    setIsEditing(true);\n    setEditingId(transaction.id);\n    setDescription(transaction.description);\n    setAmount(String(transaction.amount));\n    setCategory(transaction.category);\n    setType(transaction.type);\n    setDate(transaction.date);\n    try {\n      setDateObj(new Date(transaction.date));\n    } catch (e) {\n      setDateObj(new Date());\n    }\n  };\n\n  const onDelete = (id: string) => {\n    // Confirmation before deleting\n    deleteTransaction(id);\n  };\n\n  if (loading) {\n    return <Text>Loading...</Text>;\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <LinearGradient colors={gradients.screen} start={{ x: 0, y: 0 }} end={{ x: 1, y: 1 }} style={{ flex: 1 }}>\n      {/* Inline Add/Edit Form */}\n      <View style={styles.formCard}>\n        <Text style={styles.formTitle}>{isEditing ? 'Edit Transaction' : 'Add New Transaction'}</Text>\n\n        <View style={styles.formRow}>\n          <Text style={styles.label}>Type</Text>\n          <View style={styles.chipsRow}>\n            <TouchableOpacity onPress={() => { setType('income'); setCategory(''); }} style={[styles.chip, type === 'income' && styles.chipActive]}>\n              <Text style={[styles.chipText, type === 'income' && styles.chipTextActive]}>Income</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => { setType('expense'); setCategory(''); }} style={[styles.chip, type === 'expense' && styles.chipActive]}>\n              <Text style={[styles.chipText, type === 'expense' && styles.chipTextActive]}>Expense</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {!!type && (\n          <View style={styles.formRow}>\n            <Text style={styles.label}>Category</Text>\n            <View style={styles.categoriesWrap}>\n              {combinedCategories.map((c) => (\n                <TouchableOpacity key={c} onPress={() => setCategory(c)} style={[styles.categoryPill, category === c && styles.categoryPillActive]}>\n                  <Text style={[styles.categoryPillText, category === c && styles.categoryPillTextActive]}>{c}</Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n        )}\n\n        {category === '+ Add Category' && (\n          <View style={styles.formRow}>\n            <Text style={styles.label}>+ Add Category</Text>\n            <View style={styles.customRow}>\n              <TextInput\n                style={styles.customInputBox}\n                placeholder=\"Enter new category\"\n                placeholderTextColor=\"#94a3b8\"\n                value={customCategory}\n                onChangeText={setCustomCategory}\n                returnKeyType=\"done\"\n              />\n              <TouchableOpacity onPress={handleAddCustomCategory} style={styles.addCatButton}>\n                <Text style={styles.addCatButtonText}>Add</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n\n        <View style={styles.formRow}>\n          <Text style={styles.label}>Description</Text>\n          <TextInput\n            style={styles.textInputBox}\n            placeholder=\"Description\"\n            placeholderTextColor=\"#94a3b8\"\n            value={description}\n            onChangeText={setDescription}\n            returnKeyType=\"next\"\n          />\n        </View>\n\n        <View style={styles.formRowInline}>\n          <View style={{ flex: 1, marginRight: 8 }}>\n            <Text style={styles.label}>Amount (LKR)</Text>\n            <TextInput\n              style={styles.textInputBox}\n              placeholder=\"0.00\"\n              placeholderTextColor=\"#94a3b8\"\n              value={amount}\n              onChangeText={setAmount}\n              keyboardType=\"decimal-pad\"\n              returnKeyType=\"next\"\n            />\n          </View>\n          <View style={{ flex: 1, marginLeft: 8 }}>\n            <Text style={styles.label}>Date</Text>\n            <TouchableOpacity\n              activeOpacity={0.8}\n              style={styles.textInputBox}\n              onPress={() => setShowDatePicker(true)}\n            >\n              <Text style={{ color: date ? '#0f172a' : '#94a3b8' }}>{date || 'YYYY-MM-DD'}</Text>\n            </TouchableOpacity>\n            {showDatePicker && (\n              <DateTimePicker\n                value={dateObj}\n                mode=\"date\"\n                display=\"default\"\n                onChange={(event: unknown, selectedDate?: Date) => {\n                  setShowDatePicker(false);\n                  if (selectedDate) {\n                    setDateObj(selectedDate);\n                    const iso = selectedDate.toISOString().split('T')[0];\n                    setDate(iso);\n                  }\n                }}\n              />)\n            }\n          </View>\n        </View>\n\n        <View style={styles.actionsRow}>\n          <TouchableOpacity onPress={onSubmitForm} style={[styles.primaryButton]}>\n            <Text style={styles.primaryButtonText}>{isEditing ? 'Update Transaction' : 'Add Transaction'}</Text>\n          </TouchableOpacity>\n          {isEditing && (\n            <TouchableOpacity onPress={resetForm} style={[styles.secondaryButton]}>\n              <Text style={styles.secondaryButtonText}>Cancel</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n      {showAddPrompt && (\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalCard}>\n            <Text style={styles.modalTitle}>Add New Transaction</Text>\n            <Text style={styles.modalText}>Would you like to add a new transaction now?</Text>\n            <View style={styles.modalActions}>\n              <TouchableOpacity onPress={() => { setShowAddPrompt(false); router.push({ pathname: '/add-transaction' }); }} style={[styles.modalButton, styles.modalPrimary]}>\n                <Text style={styles.modalPrimaryText}>Open Form</Text>\n              </TouchableOpacity>\n              <TouchableOpacity onPress={() => setShowAddPrompt(false)} style={[styles.modalButton, styles.modalSecondary]}>\n                <Text style={styles.modalSecondaryText}>Cancel</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      )}\n      <Text style={styles.title}>All Transactions</Text>\n      \n      <View style={styles.filterContainer}>\n        <TouchableOpacity \n          style={[styles.filterButton, filter === 'all' && styles.activeFilter]}\n          onPress={() => setFilter('all')}\n        >\n          <Text style={[styles.filterText, filter === 'all' && styles.activeFilterText]}>All</Text>\n        </TouchableOpacity>\n        <TouchableOpacity \n          style={[styles.filterButton, filter === 'income' && styles.activeFilter]}\n          onPress={() => setFilter('income')}\n        >\n          <Text style={[styles.filterText, filter === 'income' && styles.activeFilterText]}>Income</Text>\n        </TouchableOpacity>\n        <TouchableOpacity \n          style={[styles.filterButton, filter === 'expense' && styles.activeFilter]}\n          onPress={() => setFilter('expense')}\n        >\n          <Text style={[styles.filterText, filter === 'expense' && styles.activeFilterText]}>Expenses</Text>\n        </TouchableOpacity>\n      </View>\n\n      <FlatList\n        data={filteredTransactions}\n        renderItem={({ item }) => <TransactionItem transaction={item} onDelete={onDelete} onEdit={onEdit} />}\n        keyExtractor={(item) => item.id}\n        ListEmptyComponent={<Text style={styles.emptyText}>No transactions found.</Text>}\n      />\n      </LinearGradient>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: colors.background, padding: spacing.md },\n  title: { ...typography.title, marginBottom: spacing.md },\n  filterContainer: { flexDirection: 'row', marginBottom: spacing.md, justifyContent: 'center' },\n  filterButton: { paddingVertical: 8, paddingHorizontal: 16, borderRadius: 20, backgroundColor: '#1e293b', marginHorizontal: 4, borderWidth: 1, borderColor: colors.border },\n  activeFilter: { backgroundColor: colors.income },\n  filterText: { color: colors.textSecondary, fontWeight: '600' },\n  activeFilterText: { color: 'white' },\n  transactionItem: { flexDirection: 'row', alignItems: 'center', backgroundColor: colors.card, padding: 12, borderRadius: radius.md, marginBottom: 8, borderWidth: 1, borderColor: colors.border },\n  transactionDetails: { flex: 1 },\n  transactionDesc: { fontSize: 16, fontWeight: '500', color: colors.textPrimary },\n  transactionSub: { fontSize: 12, color: colors.textSecondary },\n  transactionAmount: { fontSize: 16, fontWeight: 'bold', marginHorizontal: 8, color: colors.textPrimary },\n  income: { color: colors.income },\n  expense: { color: colors.expense },\n  transactionActions: { flexDirection: 'row' },\n  actionButton: { padding: 8 },\n  emptyText: { textAlign: 'center', marginTop: 20, color: colors.textSecondary },\n  formCard: { backgroundColor: colors.card, padding: spacing.md, borderRadius: radius.lg, marginBottom: spacing.md, borderWidth: 1, borderColor: colors.border },\n  formTitle: { fontSize: 18, fontWeight: '700', color: colors.textPrimary, marginBottom: 12 },\n  formRow: { marginBottom: 12 },\n  formRowInline: { flexDirection: 'row', marginBottom: 12 },\n  label: { ...typography.label, marginBottom: 6 },\n  chipsRow: { flexDirection: 'row' },\n  chip: { paddingVertical: 8, paddingHorizontal: 14, backgroundColor: '#1e293b', borderRadius: 20, marginRight: 8, borderWidth: 1, borderColor: colors.border },\n  chipActive: { backgroundColor: colors.income },\n  chipText: { color: colors.textSecondary, fontWeight: '600' },\n  chipTextActive: { color: 'white' },\n  categoriesWrap: { flexDirection: 'row', flexWrap: 'wrap' },\n  categoryPill: { paddingVertical: 6, paddingHorizontal: 12, backgroundColor: '#1e293b', borderRadius: 20, marginRight: 8, marginBottom: 8, borderWidth: 1, borderColor: colors.border },\n  categoryPillActive: { backgroundColor: colors.income },\n  categoryPillText: { color: colors.textSecondary, fontWeight: '600' },\n  categoryPillTextActive: { color: 'white' },\n  textInputBox: { backgroundColor: '#0b1222', paddingVertical: 10, paddingHorizontal: 12, borderRadius: 8, borderWidth: 1, borderColor: colors.border, color: colors.textPrimary },\n  textInputPlaceholder: { color: '#94a3b8' },\n  customRow: { flexDirection: 'row', alignItems: 'center' },\n  customInputBox: { flex: 1, backgroundColor: '#0b1222', paddingVertical: 10, paddingHorizontal: 12, borderRadius: 8, marginRight: 8, borderWidth: 1, borderColor: colors.border, color: colors.textPrimary },\n  customInputPlaceholder: { color: '#94a3b8' },\n  addCatButton: { backgroundColor: colors.income, paddingVertical: 10, paddingHorizontal: 16, borderRadius: 8 },\n  addCatButtonText: { color: 'white', fontWeight: '700' },\n  actionsRow: { flexDirection: 'row', justifyContent: 'space-between', marginTop: 8 },\n  primaryButton: { flex: 1, backgroundColor: colors.income, paddingVertical: 12, borderRadius: 8, alignItems: 'center', marginRight: 8 },\n  primaryButtonText: { color: 'white', fontWeight: '700' },\n  secondaryButton: { flex: 1, backgroundColor: '#1e293b', paddingVertical: 12, borderRadius: 8, alignItems: 'center', marginLeft: 8, borderWidth: 1, borderColor: colors.border },\n  secondaryButtonText: { color: colors.textPrimary, fontWeight: '700' },\n  // Simple inline modal styles\n  modalOverlay: { position: 'absolute', top: 0, bottom: 0, left: 0, right: 0, backgroundColor: 'rgba(0,0,0,0.35)', alignItems: 'center', justifyContent: 'center' },\n  modalCard: { width: '85%', backgroundColor: colors.card, borderRadius: 12, padding: 16, borderWidth: 1, borderColor: colors.border },\n  modalTitle: { fontSize: 18, fontWeight: '700', color: colors.textPrimary, marginBottom: 6, textAlign: 'center' },\n  modalText: { fontSize: 14, color: colors.textSecondary, textAlign: 'center', marginBottom: 16 },\n  modalActions: { flexDirection: 'row', justifyContent: 'space-between' },\n  modalButton: { flex: 1, paddingVertical: 10, borderRadius: 8, alignItems: 'center' },\n  modalPrimary: { backgroundColor: colors.income, marginRight: 8 },\n  modalSecondary: { backgroundColor: '#1e293b', marginLeft: 8, borderWidth: 1, borderColor: colors.border },\n  modalPrimaryText: { color: 'white', fontWeight: '700' },\n  modalSecondaryText: { color: colors.textPrimary, fontWeight: '700' },\n});\n","size_bytes":18634},"components/dashboard/LineChartBicolor.tsx":{"content":"import React, { useMemo } from 'react';\nimport { View } from 'react-native';\nimport Svg, { Path, Circle } from 'react-native-svg';\n\ntype Props = {\n  data: number[];\n  width?: number;\n  height?: number;\n  strokeWidth?: number;\n  colorPositive?: string;\n  colorNegative?: string;\n};\n\n// Simple bicolor line chart: draws two overlaid paths — one for positive\n// segments and one for negative segments — so portions above/below zero\n// can be styled differently.\nexport const LineChartBicolor: React.FC<Props> = ({\n  data,\n  width = 300,\n  height = 160,\n  strokeWidth = 2,\n  colorPositive = '#16a34a',\n  colorNegative = '#ef4444',\n}) => {\n  const { posPath, negPath, lastPoint } = useMemo(() => {\n    if (!data || data.length === 0) return { posPath: '', negPath: '', lastPoint: null };\n\n    const min = Math.min(...data, 0);\n    const max = Math.max(...data, 0);\n    const range = max - min || 1;\n\n    const step = width / Math.max(1, data.length - 1);\n\n    const points = data.map((v, i) => {\n      const x = i * step;\n      const y = height - ((v - min) / range) * height;\n      return { x, y, v };\n    });\n\n    // Build contiguous path for predicate (>=0 or <0)\n    const buildPath = (predicate: (p: { x: number; y: number; v: number }) => boolean) => {\n      let d = '';\n      let started = false;\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n        if (predicate(p)) {\n          if (!started) {\n            d += `M ${p.x} ${p.y}`;\n            started = true;\n          } else {\n            d += ` L ${p.x} ${p.y}`;\n          }\n        } else {\n          started = false;\n        }\n      }\n      return d;\n    };\n\n    const posPath = buildPath(p => p.v >= 0);\n    const negPath = buildPath(p => p.v < 0);\n\n    const lastPoint = points[points.length - 1];\n\n    return { posPath, negPath, lastPoint };\n  }, [data, width, height]);\n\n  return (\n    <View style={{ width, height }}>\n      <Svg width={width} height={height}>\n        {negPath ? <Path d={negPath} stroke={colorNegative} strokeWidth={strokeWidth} fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" /> : null}\n        {posPath ? <Path d={posPath} stroke={colorPositive} strokeWidth={strokeWidth} fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\" /> : null}\n        {lastPoint ? <Circle cx={lastPoint.x} cy={lastPoint.y} r={strokeWidth * 1.5} fill={lastPoint.v >= 0 ? colorPositive : colorNegative} /> : null}\n      </Svg>\n    </View>\n  );\n};\n\nexport default LineChartBicolor;\n","size_bytes":2485},"components/dashboard/RecentTransactions.tsx":{"content":"\nimport { useTransactions } from '@/src/transactions/TransactionsContext';\nimport React, { useMemo } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function RecentTransactions() {\n  const { transactions } = useTransactions();\n\n  const recentTransactions = useMemo(() => {\n    // Filter out income if you only want expenses, or adjust as needed\n    return transactions.slice(0, 3); // Get top 3 most recent\n  }, [transactions]);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.subtitle}>Recent Transactions</Text>\n      {recentTransactions.length > 0 ? (\n        recentTransactions.map(t => (\n          <View key={t.id} style={styles.transaction}>\n            <View>\n              <Text style={styles.description}>{t.description}</Text>\n              <Text style={styles.categoryDate}>{t.category} - {t.date}</Text>\n            </View>\n            <Text style={t.type === 'income' ? styles.income : styles.expense}>\n              {t.type === 'income' ? '+' : '-'} LKR {t.amount.toFixed(2)}\n            </Text>\n          </View>\n        ))\n      ) : (\n        <Text style={styles.emptyText}>No recent transactions.</Text>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 16,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: '#fff',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 3,\n    marginHorizontal: 16,\n  },\n  subtitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: '#1e293b',\n  },\n  transaction: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  description: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#334155',\n  },\n  categoryDate: {\n    fontSize: 12,\n    color: '#64748b',\n    marginTop: 2,\n  },\n  income: {\n    color: '#10b981',\n    fontWeight: 'bold',\n  },\n  expense: {\n    color: '#ef4444',\n    fontWeight: 'bold',\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: '#64748b',\n    marginTop: 10,\n  }\n});\n","size_bytes":2214},"components/dashboard/SpendingAnalysis.tsx":{"content":"\nimport { useTransactions } from '@/src/transactions/TransactionsContext';\nimport React, { useMemo } from 'react';\nimport { Dimensions, StyleSheet, Text, View } from 'react-native';\nimport { PieChart } from 'react-native-chart-kit';\n\nconst { width } = Dimensions.get('window');\n\n// Pre-defined colors for categories for a better look\nconst categoryColors: Record<string, string> = {\n    Food: '#f59e0b', // amber-500\n    Transport: '#3b82f6', // blue-500\n    Shopping: '#8b5cf6', // violet-500\n    Bills: '#ef4444', // red-500\n    Entertainment: '#14b8a6', // teal-500\n    Salary: '#10b981', // emerald-500 (though usually not in expenses)\n    Other: '#64748b', // slate-500\n};\n\nexport default function SpendingAnalysis() {\n  const { transactions } = useTransactions();\n\n  const { pieChartData, categoryTotals } = useMemo(() => {\n    const expenseTransactions = transactions.filter(t => t.type === 'expense');\n    const categoryTotals: Record<string, number> = expenseTransactions.reduce(\n      (acc: Record<string, number>, t) => {\n        acc[t.category] = (acc[t.category] || 0) + t.amount;\n        return acc;\n      },\n      {}\n    );\n\n    const pieChartData = Object.keys(categoryTotals).map(category => ({\n      name: category,\n      population: categoryTotals[category],\n      color: categoryColors[category] || categoryColors.Other,\n      legendFontColor: '#7F7F7F',\n      legendFontSize: 14,\n    }));\n\n    return { pieChartData, categoryTotals };\n  }, [transactions]);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.subtitle}>Spending Analysis</Text>\n\n      {pieChartData.length > 0 ? (\n        <PieChart\n          data={pieChartData}\n          width={width - 32}\n          height={200}\n          chartConfig={{\n            backgroundColor: '#ffffff',\n            backgroundGradientFrom: '#ffffff',\n            backgroundGradientTo: '#ffffff',\n            decimalPlaces: 2,\n            color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\n            labelColor: (opacity = 1) => `rgba(100, 116, 139, ${opacity})`,\n            propsForLabels: { // Added to prevent error on web if labels are too long\n                fontSize: 10, \n            },\n          }}\n          accessor={\"population\"}\n          backgroundColor={\"transparent\"}\n          paddingLeft={\"15\"}\n          center={[10, 10]}\n          absolute\n          style={{ marginVertical: 8, borderRadius: 16 }}\n        />\n      ) : (\n        <Text style={styles.emptyText}>No expense data available.</Text>\n      )}\n\n      <View style={styles.categorySummary}>\n        {Object.keys(categoryTotals).map(category => (\n          <View key={category} style={styles.categoryItem}>\n            <View style={styles.categoryInfo}>\n                <View style={[styles.colorSquare, { backgroundColor: categoryColors[category] || categoryColors.Other }]} />\n                <Text style={styles.categoryText}>{category}</Text>\n            </View>\n            <Text style={styles.categoryAmount}>LKR {categoryTotals[category].toFixed(2)}</Text>\n          </View>\n        ))}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 16,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: '#fff',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 3,\n    marginHorizontal: 16,\n  },\n  subtitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: '#1e293b',\n    textAlign: 'center',\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: '#64748b',\n    marginTop: 10,\n  },\n  categorySummary: {\n    marginTop: 16,\n  },\n  categoryItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  categoryInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  colorSquare: {\n    width: 12,\n    height: 12,\n    borderRadius: 2,\n    marginRight: 8,\n  },\n  categoryText: {\n    fontSize: 15,\n    color: '#475569',\n  },\n  categoryAmount: {\n    fontSize: 15,\n    fontWeight: '500',\n    color: '#334155',\n  },\n});\n","size_bytes":4191},"components/dashboard/Summary.tsx":{"content":"\nimport { useTransactions } from '@/src/transactions/TransactionsContext';\nimport React, { useMemo } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function Summary() {\n  const { transactions } = useTransactions();\n\n  const { totalIncome, totalExpenses, balance } = useMemo(() => {\n    const income = transactions\n      .filter(t => t.type === 'income')\n      .reduce((sum, t) => sum + t.amount, 0);\n    const expenses = transactions\n      .filter(t => t.type === 'expense')\n      .reduce((sum, t) => sum + t.amount, 0);\n    return { totalIncome: income, totalExpenses: expenses, balance: income - expenses };\n  }, [transactions]);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.subtitle}>Summary</Text>\n      <View style={styles.row}>\n        <Text>Income</Text>\n        <Text style={styles.incomeText}>LKR {totalIncome.toFixed(2)}</Text>\n      </View>\n      <View style={styles.row}>\n        <Text>Expenses</Text>\n        <Text style={styles.expenseText}>LKR {totalExpenses.toFixed(2)}</Text>\n      </View>\n      <View style={styles.row}>\n        <Text>Balance</Text>\n        <Text style={styles.balanceText}>LKR {balance.toFixed(2)}</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: '#fff',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 3,\n    marginHorizontal: 16,\n    marginVertical: 8,\n  },\n  subtitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: '#1e293b',\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 8,\n    paddingVertical: 4,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  incomeText: {\n    color: '#10b981',\n    fontWeight: 'bold',\n  },\n  expenseText: {\n    color: '#ef4444',\n    fontWeight: 'bold',\n  },\n  balanceText: {\n    fontWeight: 'bold',\n    color: '#059669',\n  },\n});\n","size_bytes":2055},"components/dashboard/SummaryChart.tsx":{"content":"import { spacing } from '@/src/theme';\nimport { useTransactions } from '@/src/transactions/TransactionsContext';\nimport SegmentedControl from '@react-native-segmented-control/segmented-control';\nimport { SymbolView } from 'expo-symbols';\nimport * as React from 'react';\nimport { Dimensions, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { BarChart as GiftedBarChart, barDataItem } from 'react-native-gifted-charts';\n\nenum Period {\n  week = 'week',\n  month = 'month',\n  year = 'year',\n}\n\ntype PeriodType = keyof typeof Period;\n\nconst { width } = Dimensions.get('window');\n\nfunction getStartOfWeek(d: Date) {\n  const date = new Date(d);\n  const day = date.getDay();\n  date.setDate(date.getDate() - day);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\nfunction formatDayLabel(date: Date) {\n  // return MM-DD\n  const mm = String(date.getMonth() + 1).padStart(2, '0');\n  const dd = String(date.getDate()).padStart(2, '0');\n  return `${mm}-${dd}`;\n}\n\nexport default function SummaryChart() {\n  const { transactions } = useTransactions();\n  const [chartPeriod, setChartPeriod] = React.useState<Period>(Period.week);\n  const [barData, setBarData] = React.useState<barDataItem[]>([]);\n  const [currentDate, setCurrentDate] = React.useState<Date>(new Date());\n  const [currentEndDate, setCurrentEndDate] = React.useState<Date>(new Date());\n  const [visibleStartDate, setVisibleStartDate] = React.useState<Date>(new Date());\n  const [visibleEndDate, setVisibleEndDate] = React.useState<Date>(new Date());\n  const [chartKey, setChartKey] = React.useState(0);\n  const [transactionType, setTransactionType] = React.useState<'Income' | 'Expense'>('Income');\n\n  React.useEffect(() => {\n    const fetch = async () => {\n      if (chartPeriod === Period.week) {\n        const start = getStartOfWeek(currentDate);\n        // include a few days before the week to reduce leading empty space\n        const extraBefore = 3; // days\n        const days: barDataItem[] = [];\n        for (let i = -extraBefore; i < 7; i++) {\n          const day = new Date(start);\n          day.setDate(start.getDate() + i);\n          const ds = day.toISOString().split('T')[0];\n          const total = transactions.filter(\n            t => t.date === ds && ((transactionType === 'Income' && t.type === 'income') || (transactionType === 'Expense' && t.type === 'expense'))\n          ).reduce((s, t) => s + t.amount, 0);\n          days.push({ value: total, label: formatDayLabel(day) });\n        }\n  setBarData(days);\n  // visible range includes extraBefore days before start and the week end\n  const visStart = new Date(start.getTime() - extraBefore * 24 * 3600 * 1000);\n  const visEnd = new Date(start.getTime() + 6 * 24 * 3600 * 1000);\n  setVisibleStartDate(visStart);\n  setVisibleEndDate(visEnd);\n  setCurrentEndDate(visEnd);\n        setChartKey(k => k + 1);\n      } else {\n        setBarData([]);\n      }\n    };\n    fetch();\n  }, [transactions, chartPeriod, currentDate, transactionType]);\n\n  const handlePrevious = () => {\n    if (chartPeriod === Period.week) {\n      const d = new Date(currentDate);\n      d.setDate(d.getDate() - 7);\n      setCurrentDate(new Date(d));\n    }\n  };\n\n  const handleNext = () => {\n    if (chartPeriod === Period.week) {\n      const d = new Date(currentDate);\n      d.setDate(d.getDate() + 7);\n      setCurrentDate(new Date(d));\n    }\n  };\n\n  const total = barData.reduce((s, it) => s + (it.value || 0), 0);\n\n  // compute chart width to allow expansion to the right based on number of bars\n  const perBarSpace = 18 + 12; // barWidth + spacing\n  const computedWidth = Math.max(width - 32, barData.length * perBarSpace + 80);\n\n  return (\n    <View style={styles.container}>\n      <View style={{ marginBottom: 8 }}>\n        <Text style={{ fontWeight: '700', fontSize: 18 }}>\n          {visibleStartDate.toLocaleDateString('en-US', { month: 'short' })} {visibleStartDate.getDate()} - {visibleEndDate.toLocaleDateString('en-US', { month: 'short' })} {visibleEndDate.getDate()}\n        </Text>\n        <Text style={{ color: 'gray' }}>Total {transactionType === 'Expense' ? 'Spending' : 'Income'}</Text>\n      </View>\n\n      <Text style={{ fontWeight: '700', fontSize: 28, marginBottom: 12 }}>{total.toFixed(2)}</Text>\n\n      <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={{ paddingRight: 12 }}>\n        <GiftedBarChart\n          key={chartKey}\n          data={barData}\n          barWidth={18}\n          height={200}\n          width={computedWidth}\n          minHeight={3}\n          barBorderRadius={3}\n          showGradient\n          spacing={12}\n          noOfSections={4}\n          yAxisThickness={0}\n          xAxisThickness={0}\n          xAxisLabelsVerticalShift={2}\n          xAxisLabelTextStyle={{ color: 'gray' }}\n          yAxisTextStyle={{ color: 'gray' }}\n          isAnimated\n          animationDuration={300}\n          frontColor={transactionType === 'Expense' ? '#dc2626' : '#16a34a'}\n          gradientColor={transactionType === 'Expense' ? '#fb923c' : '#4ade80'}\n        />\n      </ScrollView>\n\n      <View style={styles.controlsRow}>\n        <TouchableOpacity onPress={handlePrevious} style={styles.controlBtn}>\n          <SymbolView name=\"chevron.left.circle.fill\" size={36} type=\"hierarchical\" tintColor={'gray'} />\n          <Text style={{ fontSize: 11, color: 'gray' }}>Prev</Text>\n        </TouchableOpacity>\n\n        <SegmentedControl\n          values={[\"Income\", \"Expense\"]}\n          style={{ width: 200 }}\n          selectedIndex={transactionType === 'Income' ? 0 : 1}\n          onChange={(event: { nativeEvent: { selectedSegmentIndex: number } }) => {\n            const idx = event.nativeEvent.selectedSegmentIndex;\n            setTransactionType(idx === 0 ? 'Income' : 'Expense');\n          }}\n        />\n\n        <TouchableOpacity onPress={handleNext} style={styles.controlBtn}>\n          <SymbolView name=\"chevron.right.circle.fill\" size={36} type=\"hierarchical\" tintColor={'gray'} />\n          <Text style={{ fontSize: 11, color: 'gray' }}>Next</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { padding: spacing.md },\n  controlsRow: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginTop: 16 },\n  controlBtn: { alignItems: 'center' },\n});\n","size_bytes":6332},"components/ui/Card.tsx":{"content":"import { View, ViewStyle } from 'react-native';\n\ninterface CardProps extends React.PropsWithChildren {\n  style?: ViewStyle;\n}\n\nexport default function Card({ children, style = {} }: CardProps) {\n  return (\n    <View\n      style={{\n        padding: 15,\n        borderRadius: 15,\n        backgroundColor: 'white',\n        elevation: 8,\n        shadowColor: '#000',\n        shadowRadius: 8,\n        shadowOffset: { height: 6, width: 0 },\n        shadowOpacity: 0.15,\n        ...style,\n      }}\n    >\n      {children}\n    </View>\n  );\n}\n","size_bytes":533},"components/ui/TransactionListItem.tsx":{"content":"import { AntDesign } from '@expo/vector-icons';\nimport { StyleSheet, Text, View } from 'react-native';\nimport Card from './Card';\n\n// Local minimal Category shape used by the list\ntype Category = { id?: string | number; name?: string };\n\n// fallback colors (also available in SpendingAnalysis) kept locally for the list\nconst categoryColors: Record<string, string> = {\n  Food: '#f59e0b',\n  Transport: '#3b82f6',\n  Shopping: '#8b5cf6',\n  Bills: '#ef4444',\n  Entertainment: '#14b8a6',\n  Salary: '#10b981',\n  Other: '#64748b',\n  Default: '#64748b',\n};\n\ninterface TransactionListItemProps {\n  transaction: any; // project transactions vary; accept string|number ids and date formats\n  categoryInfo: Category | undefined;\n}\n\nexport default function TransactionListItem({\n  transaction,\n  categoryInfo,\n}: TransactionListItemProps) {\n  const isExpense = String(transaction.type).toLowerCase() === 'expense';\n  const iconName = isExpense ? 'minuscircle' : 'pluscircle';\n  const color = isExpense ? '#ef4444' : '#16a34a';\n  const categoryColor = categoryColors[categoryInfo?.name ?? 'Default'];\n  const emojiMap: Record<string, string> = {\n    Default: '📦',\n    Food: '🍔',\n    Transport: '🚌',\n    Shopping: '🛍️',\n    Income: '💰',\n  };\n  const emoji = emojiMap[categoryInfo?.name ?? 'Default'] || '📦';\n  return (\n    <Card style={{ padding: 12 }}>\n      <View style={styles.row}>\n        <View style={{ width: '48%', gap: 6 }}>\n          <Amount amount={Number(transaction.amount)} color={color} iconName={iconName} />\n          <CategoryItem categoryColor={categoryColor} categoryInfo={categoryInfo} emoji={emoji} />\n        </View>\n  <TransactionInfo date={transaction.date} description={transaction.description} id={transaction.id} />\n      </View>\n    </Card>\n  );\n}\n\nfunction TransactionInfo({\n  id,\n  date,\n  description,\n}: {\n  id: string | number;\n  date: string | number;\n  description: string;\n}) {\n  // support unix timestamp (seconds) or 'YYYY-MM-DD' strings\n  let dateLabel = '';\n  if (typeof date === 'number') {\n    // assume seconds\n    dateLabel = new Date(date * 1000).toLocaleString();\n  } else {\n    // try parse ISO or keep as-is\n    const parsed = Date.parse(date);\n    if (!isNaN(parsed)) dateLabel = new Date(parsed).toLocaleString();\n    else dateLabel = String(date);\n  }\n\n  return (\n    <View style={{ flexGrow: 1, gap: 6, flexShrink: 1 }}>\n      <Text style={{ fontSize: 16, fontWeight: 'bold' }}>{description}</Text>\n      <Text>Transaction number {String(id)}</Text>\n      <Text style={{ fontSize: 12, color: 'gray' }}>{dateLabel}</Text>\n    </View>\n  );\n}\n\nfunction CategoryItem({ categoryColor, categoryInfo, emoji }: { categoryColor: string; categoryInfo: Category | undefined; emoji: string }) {\n  return (\n    <View style={[styles.categoryContainer, { backgroundColor: categoryColor + '40' }]}>\n      <Text style={styles.categoryText}>{emoji} {categoryInfo?.name}</Text>\n    </View>\n  );\n}\n\nfunction Amount({ iconName, color, amount }: { iconName: 'minuscircle' | 'pluscircle'; color: string; amount: number }) {\n  const display = `LKR ${amount.toFixed(2)}`;\n  return (\n    <View style={styles.row}>\n      <AntDesign name={iconName} size={18} color={color} />\n      <Text numberOfLines={1} style={[styles.amount, { maxWidth: '80%' }]}>{display}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  amount: {\n    fontSize: 29,\n    fontWeight: '800',\n    flexShrink: 0,\n  },\n  row: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: 6,\n  },\n  categoryContainer: {\n    borderRadius: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 3,\n    alignSelf: \"flex-start\",\n  },\n  categoryText: {\n    fontSize: 12,\n  },\n});\n","size_bytes":3683},"components/ui/TransactionsList.tsx":{"content":"import { TouchableOpacity, View } from 'react-native';\nimport TransactionListItem from './TransactionListItem';\n\ntype Category = { id?: string | number; name?: string };\n\n// transaction shape in this project uses id as string and date as 'YYYY-MM-DD' or unix timestamp\ntype ProjectTransaction = {\n  id: string | number;\n  amount: number;\n  date: string | number;\n  description: string;\n  type: 'income' | 'expense' | 'Income' | 'Expense';\n  category_id?: string | number;\n};\n\nexport default function TransactionList({\n  transactions,\n  categories,\n  deleteTransaction,\n  onEdit,\n}: {\n  categories: Category[];\n  transactions: ProjectTransaction[];\n  deleteTransaction: (id: string | number) => Promise<void>;\n  onEdit?: (id: string | number) => void;\n}) {\n  return (\n    <View style={{ gap: 15 }}>\n      {transactions.map((transaction) => {\n        const categoryForCurrentItem = categories.find(\n          (category) => String(category.id) === String(transaction.category_id)\n        );\n        return (\n          <TouchableOpacity\n            key={String(transaction.id)}\n            activeOpacity={0.7}\n            onLongPress={() => deleteTransaction(transaction.id)}\n            onPress={() => onEdit && onEdit(transaction.id)}\n          >\n            <TransactionListItem\n              transaction={transaction as any}\n              categoryInfo={categoryForCurrentItem}\n            />\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n","size_bytes":1462},"src/auth/AuthContext.tsx":{"content":"\nimport { createUserWithEmailAndPassword, onAuthStateChanged, signInWithEmailAndPassword, signOut } from 'firebase/auth';\nimport { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { Alert } from 'react-native';\nimport { auth, db } from '../firebase';\nimport { UserProfile } from '../types';\n\ninterface AuthContextType {\n  user: UserProfile | null;\n  loading: boolean;\n  login: (email: string, pass: string) => Promise<void>;\n  register: (name: string, email: string, pass: string) => Promise<void>;\n  logout: () => Promise<void>;\n  updateUserCustomCategories?: (userId: string, type: 'expense' | 'income', categories: string[]) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType>({} as AuthContextType);\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      try {\n        if (firebaseUser) {\n          const userDocRef = doc(db, 'users', firebaseUser.uid);\n          const userDoc = await getDoc(userDocRef);\n          if (userDoc.exists()) {\n            setUser({\n              uid: firebaseUser.uid,\n              email: firebaseUser.email,\n              name: userDoc.data().name,\n              customCategories: userDoc.data().customCategories,\n            });\n          } else {\n            // Fallback if user doc doesn't exist (e.g., new user just signed up)\n            const newUser: UserProfile = {\n              uid: firebaseUser.uid,\n              email: firebaseUser.email,\n              name: firebaseUser.email?.split('@')[0] || 'User',\n              customCategories: { expense: [], income: [] },\n            };\n            await setDoc(userDocRef, newUser, { merge: true });\n            setUser(newUser);\n          }\n        } else {\n          setUser(null);\n        }\n      } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n        setUser(null); // Ensure user is null on error\n        Alert.alert(\"Error\", \"Failed to load user profile. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    });\n    return unsubscribe;\n  }, []);\n\n  const login = async (email: string, pass: string) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, pass);\n    } catch (error: any) {\n      Alert.alert('Login Failed', error.message);\n      throw error;\n    }\n  };\n\n  const register = async (name: string, email: string, pass: string) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, pass);\n      const firebaseUser = userCredential.user;\n      await setDoc(doc(db, 'users', firebaseUser.uid), {\n        name: name,\n        email: email,\n        customCategories: { expense: [], income: [] },\n      });\n    } catch (error: any) {\n      let errorMessage = 'An unexpected error occurred. Please try again.';\n      if (error.code === 'auth/email-already-in-use') {\n        errorMessage = 'This email address is already in use.';\n      } else if (error.code === 'auth/weak-password') {\n        errorMessage = 'The password is too weak. Please use at least 6 characters.';\n      } else if (error.code === 'auth/invalid-email') {\n        errorMessage = 'Please enter a valid email address.';\n      }\n      Alert.alert('Registration Failed', errorMessage);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    await signOut(auth);\n  };\n\n  const updateUserCustomCategories = async (\n    userId: string,\n    type: 'expense' | 'income',\n    categories: string[]\n  ) => {\n    const userDocRef = doc(db, 'users', userId);\n    await updateDoc(userDocRef, { [`customCategories.${type}`]: categories });\n    setUser(prev => prev ? { ...prev, customCategories: { ...(prev.customCategories || {}), [type]: categories } } : prev);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, register, logout, updateUserCustomCategories }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","size_bytes":4238},"src/components/ThemedView.tsx":{"content":"\nimport { View, type ViewProps } from 'react-native';\n\nexport function ThemedView(props: ViewProps) {\n  return <View {...props} />;\n}\n","size_bytes":134},"src/navigation/AppNavigator.tsx":{"content":"\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { useAuth } from '../auth/AuthContext';\nimport AuthNavigator from './AuthNavigator';\nimport MainTabNavigator from './MainTabNavigator';\n\nconst AppNavigator = () => {\n  const { user } = useAuth();\n\n  return (\n    <NavigationContainer>\n      {user ? <MainTabNavigator /> : <AuthNavigator />}\n    </NavigationContainer>\n  );\n};\n\nexport default AppNavigator;\n","size_bytes":454},"src/navigation/AuthNavigator.tsx":{"content":"\nimport React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport LoginScreen from '../screens/LoginScreen';\nimport RegisterScreen from '../screens/RegisterScreen';\n\nexport type AuthStackParamList = {\n  Login: undefined;\n  Register: undefined;\n};\n\nconst Stack = createNativeStackNavigator<AuthStackParamList>();\n\nconst AuthNavigator = () => {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Register\" component={RegisterScreen} />\n    </Stack.Navigator>\n  );\n};\n\nexport default AuthNavigator;\n","size_bytes":649},"src/screens/AnalysisScreen.tsx":{"content":"\nimport React from 'react';\nimport { View, Text, StyleSheet, Dimensions } from 'react-native';\nimport { PieChart } from 'react-native-chart-kit';\nimport { useTransactions } from '../transactions/TransactionsContext';\n\nconst screenWidth = Dimensions.get(\"window\").width;\n\nconst AnalysisScreen = () => {\n  const { transactions } = useTransactions();\n\n  const expenseByCategory = transactions\n    .filter(t => t.type === 'expense')\n    .reduce((acc, t) => {\n      const existing = acc.find(item => item.name === t.category);\n      if (existing) {\n        existing.amount += t.amount;\n      } else {\n        acc.push({ name: t.category, amount: t.amount, color: `#${Math.floor(Math.random()*16777215).toString(16)}`, legendFontColor: \"#7F7F7F\", legendFontSize: 15 });\n      }\n      return acc;\n    }, [] as { name: string; amount: number; color: string, legendFontColor: string, legendFontSize: number }[]);\n\n  const chartConfig = {\n    backgroundGradientFrom: \"#1E2923\",\n    backgroundGradientFromOpacity: 0,\n    backgroundGradientTo: \"#08130D\",\n    backgroundGradientToOpacity: 0.5,\n    color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n    strokeWidth: 2, // optional, default 3\n    barPercentage: 0.5,\n    useShadowColorFromDataset: false // optional\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Expense Analysis</Text>\n      <PieChart\n        data={expenseByCategory}\n        width={screenWidth}\n        height={220}\n        chartConfig={chartConfig}\n        accessor={\"amount\"}\n        backgroundColor={\"transparent\"}\n        paddingLeft={\"15\"}\n        absolute\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n});\n\nexport default AnalysisScreen;\n","size_bytes":1844},"src/screens/LoginScreen.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet } from 'react-native';\nimport { useAuth } from '../auth/AuthContext';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { AuthStackParamList } from '../navigation/AuthNavigator';\n\ntype Props = NativeStackScreenProps<AuthStackParamList, 'Login'>;\n\nconst LoginScreen = ({ navigation }: Props) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { login } = useAuth();\n\n  const handleLogin = () => {\n    // In a real app, you'd authenticate with a backend\n    login({ id: '1', email, name: 'Demo User' });\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Welcome Back</Text>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        value={email}\n        onChangeText={setEmail}\n        keyboardType=\"email-address\"\n        autoCapitalize=\"none\"\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <Button title=\"Login\" onPress={handleLogin} />\n      <Button title=\"Go to Register\" onPress={() => navigation.navigate('Register')} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 12,\n    paddingHorizontal: 8,\n  },\n});\n\nexport default LoginScreen;\n","size_bytes":1697},"src/screens/MainTabNavigator.tsx":{"content":"\nimport { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport React from 'react';\nimport AnalysisScreen from '../screens/AnalysisScreen';\nimport DashboardScreen from '../screens/DashboardScreen';\nimport TransactionsScreen from '../screens/TransactionsScreen';\n\nexport type MainTabParamList = {\n  Dashboard: undefined;\n  Transactions: undefined;\n  Analysis: undefined;\n};\n\nconst Tab = createBottomTabNavigator<MainTabParamList>();\n\nconst MainTabNavigator = () => {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName: React.ComponentProps<typeof Ionicons>['name'] = 'alert-circle';\n\n          if (route.name === 'Dashboard') {\n            iconName = focused ? 'home' : 'home-outline';\n          } else if (route.name === 'Transactions') {\n            iconName = focused ? 'list' : 'list-outline';\n          } else if (route.name === 'Analysis') {\n            iconName = focused ? 'trophy' : 'trophy-outline';\n          }\n\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n      })}\n    >\n      <Tab.Screen name=\"Dashboard\" component={DashboardScreen} options={{ title: 'Dashboard' }} />\n      <Tab.Screen name=\"Transactions\" component={TransactionsScreen} options={{ title: 'Transactions' }} />\n      <Tab.Screen name=\"Analysis\" component={AnalysisScreen} options={{ title: 'Goals' }} />\n    </Tab.Navigator>\n  );\n};\n\nexport default MainTabNavigator;\n","size_bytes":1543},"src/screens/RegisterScreen.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet } from 'react-native';\nimport { useAuth } from '../auth/AuthContext';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { AuthStackParamList } from '../navigation/AuthNavigator';\n\ntype Props = NativeStackScreenProps<AuthStackParamList, 'Register'>;\n\nconst RegisterScreen = ({ navigation }: Props) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { login } = useAuth();\n\n  const handleRegister = () => {\n    // In a real app, you'd register with a backend\n    login({ id: '1', email, name });\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Create Account</Text>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Name\"\n        value={name}\n        onChangeText={setName}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        value={email}\n        onChangeText={setEmail}\n        keyboardType=\"email-address\"\n        autoCapitalize=\"none\"\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <Button title=\"Register\" onPress={handleRegister} />\n      <Button title=\"Go to Login\" onPress={() => navigation.navigate('Login')} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 12,\n    paddingHorizontal: 8,\n  },\n});\n\nexport default RegisterScreen;\n","size_bytes":1868},"src/screens/TransactionsContext.tsx":{"content":"\nimport React, { createContext, useState, useContext, ReactNode } from 'react';\nimport { Transaction } from '../types';\n\ninterface TransactionsContextType {\n  transactions: Transaction[];\n  addTransaction: (transaction: Omit<Transaction, 'id'>) => void;\n  updateTransaction: (transaction: Transaction) => void;\n  deleteTransaction: (id: string) => void;\n}\n\nconst TransactionsContext = createContext<TransactionsContextType | undefined>(undefined);\n\nconst initialTransactions: Transaction[] = [\n    { id: '1', description: 'Groceries', amount: 75.50, category: 'Food', type: 'expense', date: '2025-08-28' },\n    { id: '2', description: 'August Salary', amount: 3000.00, category: 'Salary', type: 'income', date: '2025-08-25' },\n    { id: '3', description: 'Gas Bill', amount: 50.00, category: 'Bills', type: 'expense', date: '2025-08-22' },\n    { id: '4', description: 'Train Ticket', amount: 15.00, category: 'Transport', type: 'expense', date: '2025-08-20' },\n    { id: '5', description: 'Movie Night', amount: 45.00, category: 'Entertainment', type: 'expense', date: '2025-08-18' },\n    { id: '6', description: 'Freelance Work', amount: 500.00, category: 'Salary', type: 'income', date: '2025-08-15' },\n];\n\nexport const TransactionsProvider = ({ children }: { children: ReactNode }) => {\n  const [transactions, setTransactions] = useState<Transaction[]>(initialTransactions);\n\n  const addTransaction = (transaction: Omit<Transaction, 'id'>) => {\n    setTransactions(prev => [...prev, { ...transaction, id: Date.now().toString() }]);\n  };\n\n  const updateTransaction = (updatedTransaction: Transaction) => {\n    setTransactions(prev => prev.map(t => t.id === updatedTransaction.id ? updatedTransaction : t));\n  };\n\n  const deleteTransaction = (id: string) => {\n    setTransactions(prev => prev.filter(t => t.id !== id));\n  };\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, addTransaction, updateTransaction, deleteTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  );\n};\n\nexport const useTransactions = () => {\n  const context = useContext(TransactionsContext);\n  if (context === undefined) {\n    throw new Error('useTransactions must be used within a TransactionsProvider');\n  }\n  return context;\n};\n","size_bytes":2243},"src/screens/TransactionsScreen.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Button, FlatList, StyleSheet, Text, TextInput, View } from 'react-native';\nimport { useTransactions } from '../transactions/TransactionsContext';\nimport { Transaction } from '../types';\n\nconst TransactionsScreen = () => {\n  const { transactions, addTransaction, updateTransaction, deleteTransaction } = useTransactions();\n  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);\n\n  const handleAddOrUpdate = (transaction: Omit<Transaction, 'id'>) => {\n    if (editingTransaction) {\n      // TransactionsContext.updateTransaction expects (id, updates)\n      updateTransaction(editingTransaction.id, { ...transaction });\n      setEditingTransaction(null);\n    } else {\n      addTransaction(transaction);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Transactions</Text>\n      <TransactionForm onSubmit={handleAddOrUpdate} transaction={editingTransaction} />\n      <FlatList\n        data={transactions}\n        keyExtractor={item => item.id}\n        renderItem={({ item }) => (\n          <View style={styles.transactionItem}>\n            <View>\n              <Text>{item.description}</Text>\n              <Text>{item.category}</Text>\n            </View>\n            <View style={{alignItems: 'flex-end'}}>\n              <Text style={{ color: item.type === 'income' ? 'green' : 'red' }}>\n                {item.type === 'income' ? '+' : '-'} LKR {item.amount.toFixed(2)}\n              </Text>\n              <Text>{item.date}</Text>\n              <View style={{flexDirection: 'row'}}>\n                <Button title=\"Edit\" onPress={() => setEditingTransaction(item)} />\n                <Button title=\"Delete\" onPress={() => deleteTransaction(item.id)} />\n              </View>\n            </View>\n          </View>\n        )}\n      />\n    </View>\n  );\n};\n\nconst TransactionForm = ({ onSubmit, transaction }: { onSubmit: (data: Omit<Transaction, 'id'>) => void, transaction: Transaction | null }) => {\n  const [description, setDescription] = useState(transaction?.description || '');\n  const [amount, setAmount] = useState(transaction?.amount.toString() || '');\n  const [category, setCategory] = useState(transaction?.category || '');\n  const [type, setType] = useState<'income' | 'expense'>(transaction?.type || 'expense');\n  const [date, setDate] = useState(transaction?.date || new Date().toISOString().split('T')[0]);\n\n  const handleSubmit = () => {\n    onSubmit({ description, amount: parseFloat(amount), category, type, date });\n    setDescription('');\n    setAmount('');\n    setCategory('');\n    setType('expense');\n    setDate(new Date().toISOString().split('T')[0]);\n  };\n\n  return (\n    <View style={styles.formContainer}>\n      <TextInput placeholder=\"Description\" value={description} onChangeText={setDescription} style={styles.input} />\n      <TextInput placeholder=\"Amount\" value={amount} onChangeText={setAmount} style={styles.input} keyboardType=\"numeric\" />\n      <TextInput placeholder=\"Category\" value={category} onChangeText={setCategory} style={styles.input} />\n      <TextInput placeholder=\"Date\" value={date} onChangeText={setDate} style={styles.input} />\n      <View style={{flexDirection: 'row', justifyContent: 'space-around'}}>\n        <Button title=\"Expense\" onPress={() => setType('expense')} color={type === 'expense' ? 'red' : 'gray'} />\n        <Button title=\"Income\" onPress={() => setType('income')} color={type === 'income' ? 'green' : 'gray'} />\n      </View>\n      <Button title={transaction ? \"Update\" : \"Add\"} onPress={handleSubmit} />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  transactionItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc',\n  },\n  formContainer: {\n    marginBottom: 16\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 12,\n    paddingHorizontal: 8,\n  },\n});\n\nexport default TransactionsScreen;\n","size_bytes":4153},"src/transactions/TransactionsContext.tsx":{"content":"\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { db } from '../firebase';\nimport {\n  collection,\n  query,\n  where,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  doc,\n  serverTimestamp,\n  Timestamp,\n} from 'firebase/firestore';\nimport { useAuth } from '../auth/AuthContext';\nimport { Transaction } from '../types';\n\n// Omit id because it's generated by Firestore\ntype NewTransaction = Omit<Transaction, 'id'>;\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  addTransaction: (transaction: Omit<NewTransaction, 'userId' | 'createdAt'>) => Promise<void>;\n  updateTransaction: (id: string, updates: Partial<Omit<NewTransaction, 'userId' | 'createdAt'> | { date: string }>) => Promise<void>;\n  deleteTransaction: (id: string) => Promise<void>;\n  loading: boolean;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>({} as TransactionsContextData);\n\nexport const useTransactions = () => {\n  return useContext(TransactionsContext);\n};\n\nexport const TransactionsProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth(); // Get the current user from AuthContext\n\n  useEffect(() => {\n    if (!user) {\n      setTransactions([]);\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    const q = query(collection(db, 'transactions'), where('userId', '==', user.uid));\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const transactionsData: Transaction[] = [];\n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        transactionsData.push({\n          id: doc.id,\n          description: data.description,\n          amount: data.amount,\n          category: data.category,\n          type: data.type,\n          date: data.date,\n          createdAt: data.createdAt,\n          userId: data.userId,\n        });\n      });\n      transactionsData.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n      setTransactions(transactionsData);\n      setLoading(false);\n    }, (error) => {\n        console.error(\"Error fetching transactions: \", error);\n        setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [user]);\n\n  const addTransaction = async (transaction: Omit<NewTransaction, 'userId' | 'createdAt'>) => {\n    if (!user) throw new Error(\"No user is signed in to add a transaction.\");\n    \n    await addDoc(collection(db, 'transactions'), {\n      ...transaction,\n      userId: user.uid,\n      createdAt: serverTimestamp(),\n    });\n  };\n\n  const updateTransaction = async (id: string, updates: Partial<Omit<NewTransaction, 'userId' | 'createdAt'> | { date: string }>) => {\n     if (!user) throw new Error(\"No user is signed in to update a transaction.\");\n    const transactionDocRef = doc(db, 'transactions', id);\n    await updateDoc(transactionDocRef, updates);\n  };\n\n  const deleteTransaction = async (id: string) => {\n    if (!user) throw new Error(\"No user is signed in to delete a transaction.\");\n    const transactionDocRef = doc(db, 'transactions', id);\n    await deleteDoc(transactionDocRef);\n  };\n\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, loading, addTransaction, updateTransaction, deleteTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  );\n};\n","size_bytes":3431},"src/types/index.ts":{"content":"\nexport interface Transaction {\n  id: string;\n  description: string;\n  amount: number;\n  category: string;\n  type: 'expense' | 'income';\n  date: string;\n  createdAt?: any; // Firestore Timestamp\n  userId?: string;\n}\n\nexport interface UserProfile {\n  uid: string;\n  email: string | null;\n  name: string | null;\n  customCategories?: {\n    expense?: string[];\n    income?: string[];\n  };\n}\n","size_bytes":387},"android/app/src/main/java/com/orion343/nativefinanceapp/MainActivity.kt":{"content":"package com.orion343.nativefinanceapp\n\nimport android.os.Build\nimport android.os.Bundle\n\nimport com.facebook.react.ReactActivity\nimport com.facebook.react.ReactActivityDelegate\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled\nimport com.facebook.react.defaults.DefaultReactActivityDelegate\n\nimport expo.modules.ReactActivityDelegateWrapper\n\nclass MainActivity : ReactActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    // Set the theme to AppTheme BEFORE onCreate to support\n    // coloring the background, status bar, and navigation bar.\n    // This is required for expo-splash-screen.\n    setTheme(R.style.AppTheme);\n    super.onCreate(null)\n  }\n\n  /**\n   * Returns the name of the main component registered from JavaScript. This is used to schedule\n   * rendering of the component.\n   */\n  override fun getMainComponentName(): String = \"main\"\n\n  /**\n   * Returns the instance of the [ReactActivityDelegate]. We use [DefaultReactActivityDelegate]\n   * which allows you to enable New Architecture with a single boolean flags [fabricEnabled]\n   */\n  override fun createReactActivityDelegate(): ReactActivityDelegate {\n    return ReactActivityDelegateWrapper(\n          this,\n          BuildConfig.IS_NEW_ARCHITECTURE_ENABLED,\n          object : DefaultReactActivityDelegate(\n              this,\n              mainComponentName,\n              fabricEnabled\n          ){})\n  }\n\n  /**\n    * Align the back button behavior with Android S\n    * where moving root activities to background instead of finishing activities.\n    * @see <a href=\"https://developer.android.com/reference/android/app/Activity#onBackPressed()\">onBackPressed</a>\n    */\n  override fun invokeDefaultOnBackPressed() {\n      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.R) {\n          if (!moveTaskToBack(false)) {\n              // For non-root activities, use the default implementation to finish them.\n              super.invokeDefaultOnBackPressed()\n          }\n          return\n      }\n\n      // Use the default back button implementation on Android S\n      // because it's doing more than [Activity.moveTaskToBack] in fact.\n      super.invokeDefaultOnBackPressed()\n  }\n}\n","size_bytes":2199},"android/app/src/main/java/com/orion343/nativefinanceapp/MainApplication.kt":{"content":"package com.orion343.nativefinanceapp\n\nimport android.app.Application\nimport android.content.res.Configuration\n\nimport com.facebook.react.PackageList\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ReactHost\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.soloader.OpenSourceMergedSoMapping\nimport com.facebook.soloader.SoLoader\n\nimport expo.modules.ApplicationLifecycleDispatcher\nimport expo.modules.ReactNativeHostWrapper\n\nclass MainApplication : Application(), ReactApplication {\n\n  override val reactNativeHost: ReactNativeHost = ReactNativeHostWrapper(\n        this,\n        object : DefaultReactNativeHost(this) {\n          override fun getPackages(): List<ReactPackage> {\n            val packages = PackageList(this).packages\n            // Packages that cannot be autolinked yet can be added manually here, for example:\n            // packages.add(MyReactNativePackage())\n            return packages\n          }\n\n          override fun getJSMainModuleName(): String = \".expo/.virtual-metro-entry\"\n\n          override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n          override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n          override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED\n      }\n  )\n\n  override val reactHost: ReactHost\n    get() = ReactNativeHostWrapper.createReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    super.onCreate()\n    SoLoader.init(this, OpenSourceMergedSoMapping)\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      // If you opted-in for the New Architecture, we load the native entry point for this app.\n      load()\n    }\n    ApplicationLifecycleDispatcher.onApplicationCreate(this)\n  }\n\n  override fun onConfigurationChanged(newConfig: Configuration) {\n    super.onConfigurationChanged(newConfig)\n    ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)\n  }\n}\n","size_bytes":2127},"replit.md":{"content":"# Native Finance App\n\n## Overview\nThis is a React Native finance tracking app built with Expo, featuring user authentication, transaction management, spending analysis, and financial goals. The app uses Firebase for backend services and runs as a web application in the Replit environment.\n\n## Recent Changes\n- **Sept 21, 2025**: Imported from GitHub and configured for Replit environment\n- Moved Firebase configuration to use environment variables for security\n- Set up Expo web development workflow on port 5000\n- Configured deployment for production autoscale hosting\n- Fixed compatibility issues and got the app running successfully\n\n## User Preferences\n- Keep Firebase API keys secure using environment variables\n- Maintain existing code structure and conventions\n- Use Expo for React Native web development\n\n## Project Architecture\n### Tech Stack\n- **Frontend**: React Native with Expo Router\n- **Backend**: Firebase (Auth, Firestore)\n- **Styling**: React Native StyleSheet\n- **Navigation**: Expo Router with file-based routing\n- **Charts**: React Native Gifted Charts\n- **Development**: TypeScript, Metro bundler\n\n### Key Features\n- User authentication (login/register)\n- Transaction management (add, edit, list)\n- Financial dashboard with charts\n- Spending analysis\n- Financial goals tracking\n- Responsive web interface\n\n### Project Structure\n- `/app` - Main application screens and routing\n- `/src` - Core components and business logic\n- `/components` - Reusable UI components\n- `/assets` - Images and fonts\n- `/android` - Android native configuration\n\n### Dependencies\n- Expo SDK 54.0.0\n- React Native 0.79.5 (with some version warnings that don't affect functionality)\n- Firebase 12.2.1\n- React Navigation 7.x\n- Various Expo modules for device features\n\n### Development Setup\n- **Port**: 5000 (web development server)\n- **Host**: LAN mode for Replit compatibility\n- **Build Tool**: Metro bundler\n- **Type Checking**: TypeScript with strict mode\n\n### Firebase Configuration\nFirebase config uses environment variables with fallbacks:\n- `EXPO_PUBLIC_FIREBASE_API_KEY`\n- `EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN`\n- `EXPO_PUBLIC_FIREBASE_PROJECT_ID`\n- `EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET`\n- `EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID`\n- `EXPO_PUBLIC_FIREBASE_APP_ID`\n- `EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID`\n\n### Deployment\n- **Target**: Autoscale (stateless web app)\n- **Build**: Expo export to static web files\n- **Runtime**: Serve static files on port 5000\n- **Environment**: Production-ready with Firebase backend\n\n### Known Issues\n- Some dependency version warnings (non-blocking)\n- TypeScript LSP warnings (compilation still works)\n- Deprecated shadow style props (cosmetic warnings only)\n\nThe app is fully functional and ready for development and deployment.","size_bytes":2763}},"version":1}